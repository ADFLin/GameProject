#include "Common.sgc"
#include "ViewParam.sgc"
#include "CubeMapCommon.sgc"

struct VSOutputParameters
{
	float3 UVs MEMBER_OUT(TEXCOORD0);
};


#if VERTEX_SHADER


VS_ENTRY_START(MainVS)
	VS_INPUT(float3 InPosition , ATTRIBUTE_POSITION)
	VS_INPUT(float3 InUV, ATTRIBUTE_TEXCOORD)
	VS_OUTPUT_STRUCT(VSOutputParameters VSOutput, 0)
VS_ENTRY_END(MainVS)
{
	VSOutput.UVs = InUV;
	float4 viewPos = mul( View.worldToView , float4(InPosition, 0));
#if USE_INVERSE_ZBUFFER
	SvPosition = mul(View.viewToClip, float4(viewPos.xyz, 1));
#else
	SvPosition = mul(View.viewToClip, float4(viewPos.xyz, 1)).xyzz;
#endif
	//SvPosition = mul(View.worldToClip, float4(InPosition, 1));
}

#endif

#if PIXEL_SHADER

#define  USE_CUBE_TEXTURE 1

DEFINE_TEXTURE(Texture2D, Texture);
DEFINE_TEXTURE(TextureCube, CubeTexture);
uniform float CubeLevel;

float3 GetEnvRadiance(float3 dir)
{
#if USE_CUBE_TEXTURE
	return TEXTURE_SAMPLE_LEVEL(CubeTexture, normalize(dir) , CubeLevel).rgb;
#else
	return TEXTURE_SAMPLE(Texture, EquirectangularCoord(dir)).rgb;
#endif
}

PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput , 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(MainPS)
{
	float3 color = GetEnvRadiance(VSOutput.UVs);
	OutColor = float4(color, 1);
	//OutColor = float4(VSOutput.UVs, 1);
}



#endif