#include "Common.sgc"
#include "ViewParam.sgc"
#include "LightingCommon.sgc"

#if SHADER_ENTRY(GenerateHeightCS)

struct CraterInfo
{
	float3 pos;
	float radius;
};

#if SHADER_COMPILING
layout(std430) buffer VertexBlock
{
	readonly float Vertices[];
};

layout(std430) buffer HeightBlock
{
	writeonly float Heights[];
};
layout(std430) buffer CraterBlock
{
	readonly CraterInfo Craters[];
};

#else
readonly float Vertices[];
writeonly float Heights[];
readonly CraterInfo Craters[];
#endif

uniform int VertexStride;
float3 GetVertexPos(int index)
{
	int offset = VertexStride * index;
	return float3(Vertices[offset], Vertices[offset + 1], Vertices[offset + 2]);
}

uniform int NumCraters;

float SmoothMin(float a, float b, float k)
{
	float h = max(k - abs(a - b), 0.0) / k;
	return min(a, b) - h * h*k*(1.0 / 4.0);
}

float SmoothMax(float a, float b, float k)
{
	float h = max(k - abs(a - b), 0.0) / k;
	return max(a, b) + h * h*k*(1.0 / 4.0);
}

uniform int NumVertices;
uniform float RimWidth;
uniform float RimSteepness;
uniform float FloorHeight;
uniform float Smoothness;

layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void GenerateHeightCS()
{
	int vertexIndex = int(SvDispatchThreadID.x);
	if (vertexIndex >= NumVertices)
		return;

	float3 pos = GetVertexPos(vertexIndex);

	float craterHeight = 0;
	for (int i = 0; i < NumCraters; ++i)
	{
		float x = length(pos - Craters[i].pos) / Craters[i].radius;

		float cavity = x * x - 1;
		float rimX = min(x - 1 - RimWidth, 0);
		float rim = RimSteepness * rimX * rimX;

		float craterShape = SmoothMax(cavity, FloorHeight, Smoothness);
		craterShape = SmoothMin(craterShape, rim, Smoothness);
		craterHeight += craterShape * Craters[i].radius;
	}

	float len = length(pos);

	Heights[vertexIndex] = 1 + craterHeight;
}

#endif //SHADER_ENTRY(GenerateHeightCS)

struct VSOutputParam
{
	float3 pos;
	float4 normalAndHeight;
};

#if VERTEX_SHADER

#if SHADER_COMPILING
layout(std430) buffer HeightBlock
{
	readonly float Heights[];
};
#else
readonly float Heights[];
#endif

uniform float4x4 XForm;

VS_ENTRY_START(RenderVS)
	VS_INPUT(float3 InPos, ATTRIBUTE_POSITION)
	VS_INPUT(float3 InNormal, ATTRIBUTE_NORMAL)
	VS_INPUT_VERTEXID
	VS_OUTPUT_STRUCT(VSOutputParam VSOutput, 0)
VS_ENTRY_END(RenderVS)
{
	float height = length(InPos);
	float3 worldPos = InPos;
	SvPosition = mul( XForm , float4( worldPos , 1 ) );
	VSOutput.pos = worldPos;
	VSOutput.normalAndHeight = float4(InNormal, height);
}

#endif

#if SHADER_ENTRY(RenderPS)

PS_ENTRY_START(RenderPS)
	PS_INPUT_STRUCT(VSOutputParam VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(RenderPS)
{
	float3 N = normalize(VSOutput.normalAndHeight.xyz);
	float3 V = normalize(View.worldPos - VSOutput.pos);
	float3 shade = PhongShading(float3(1, 1, 1), float3(1, 1, 1), N, normalize(float3(1, 1, 1)), V , 100);
	OutColor = float4(shade, 1.0);

	//OutColor = float4(float3(VSOutput.normalAndHeight.w - 0.9) / 0.2, 1);
}

#endif //SHADER_ENTRY(RenderPS)