#include "Common.sgc"
#include "ViewParam.sgc"
#include "PrimitiveParam.sgc"
#include "VertexFactoryProcess.sgc"
#include "DeferredShadingCommon.sgc"

struct VSOutputParameters
{
	float4 worldPos MEMBER_OUT(TEXCOORD0);
	float4 color    MEMBER_OUT(TEXCOORD1);
	float4 normal   MEMBER_OUT(TEXCOORD2);
};

#if VERTEX_SHADER

VS_ENTRY_START(BassPassVS)
	VS_INPUT( float3 InPos, ATTRIBUTE_POSITION )
	VS_INPUT( float4 InColor , ATTRIBUTE_COLOR )
	VS_INPUT( float3 InNormal, ATTRIBUTE_NORMAL )
	VS_OUTPUT_STRUCT(VSOutputParameters OutputVS, 0)
VS_ENTRY_END(BassPassVS)
{
	OutputVS.color = InColor;
	OutputVS.worldPos = mul( Primitive.localToWorld , float4(InPos , 1 ) );
	OutputVS.normal = mul( float4(InNormal, 0) , Primitive.worldToLocal );
	SvPosition = mul( View.worldToClip , OutputVS.worldPos);
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER


PS_ENTRY_START(BasePassPS)
	PS_INPUT_STRUCT(VSOutputParameters InputPS, 0)
	PS_OUTPUT(float4 OutColor, 0)
	PS_OUTPUT(float4 OutColorA, 1)

	PS_OUTPUT(float4 OutColorB, 2)
	PS_OUTPUT(float4 OutColorC, 3)
	PS_OUTPUT(float4 OutColorD, 4)

PS_ENTRY_END(BasePassPS)
{
	GBufferData GBuffer;
	GBuffer.worldPos = InputPS.worldPos.xyz;
	GBuffer.normal = normalize( InputPS.normal.xyz );
	GBuffer.baseColor = InputPS.color.rgb;
	GBuffer.metallic = 0.3;
	GBuffer.roughness = 0.5;
	GBuffer.specular = 0.5;
	GBuffer.shadingModel = SHADINGMODEL_DEFAULT_LIT;

	float4 GBufferA, GBufferB, GBufferC, GBufferD;

	EncodeGBuffer(GBuffer, GBufferA, GBufferB, GBufferC, GBufferD);

	OutColor = float4(0,0,1.0,1.0);
	OutColorA = GBufferA;

	OutColorB = GBufferB;
	OutColorC = GBufferC;
	OutColorD = GBufferD;
}

#endif //PIXEL_SHADER