#include "VertexFactoryProcess.sgc"
#include "MaterialProcess.sgc"

#include "DeferredShadingCommon.sgc"
#include "ViewParam.sgc"

#ifndef FORWARD_SHADING
#define FORWARD_SHADING 0
#endif //FORWARD_SHADING


struct PassInterpolantsParam
{
	float dump MEMBER_OUT(TEXCOORD10);
};

struct VertexOutputParamVSToPS
{
	FactoryInterpolantsParam   factoryInterpolants;
	PassInterpolantsParam      passInterpolants;
};

#if VERTEX_SHADER

VS_ENTRY_START(BassPassVS)
	VS_INPUT_PARAMETERS(VertexFactoryInputParameters VertexInput)
	VS_OUTPUT_STRUCT(VertexOutputParameters OutputVS, 0)
VS_ENTRY_END(BassPassVS)
{
	VertexFactoryIntermediatesVS intermediates = VertexFactory_GetIntermediatesVS(VERTEX_INPUT_PARAM(VertexInput));

	MaterialInputVS materialInput = InitMaterialInputVS();

	MaterialParametersVS materialParameters = VertexFactory_GetMaterialParameterVS( 
#if COMPILER_HLSL
		VertexInput,
#endif
		intermediates );

	CalcMaterialInputVS( materialInput , materialParameters );

	SvPosition = VertexFactory_GetInterpolants(OutputVS.factoryInterpolants , intermediates , materialInput , materialParameters );
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

PS_ENTRY_START(BasePassPS)
	PS_INPUT_STRUCT(VertexOutputParamVSToPS InputPS , 0)
	PS_OUTPUT(float4 OutColor,  0)
#if FORWARD_SHADING == 0
	PS_OUTPUT(float4 OutColorA, 1)
	PS_OUTPUT(float4 OutColorB, 2)
	PS_OUTPUT(float4 OutColorC, 3)
	PS_OUTPUT(float4 OutColorD, 4)
#endif
#if MATERIAL_USE_DEPTH_OFFSET
	PS_OUTPUT_DEPTH
#endif
PS_ENTRY_END(BasePassPS)
{
	MaterialInputPS materialInput = InitMaterialInputPS();
	MaterialParametersPS materialParameters = VertexFactory_GetMaterialParameterPS(InputPS.factoryInterpolants);

	CalcMaterialParameters(materialInput , materialParameters);

	//float4 color = float4( materialParameters.vectexColor * 0.1 , 1 );
	float4 color = float4(0,0,0,1);
	color.rgb += materialInput.emissiveColor;

	GBufferData GBuffer;
	float depth;
	GBuffer.worldPos = GetMaterialWorldPositionAndCheckDepthOffset(materialInput, materialParameters, depth);
#if MATERIAL_USE_DEPTH_OFFSET
	SvDepth = depth;
#endif
	//GBuffer.normal = normalize(vsOutput.normal.xyz);
	GBuffer.normal = GetMaterialWorldNormal(materialInput , materialParameters);
	//GBuffer.normal = materialParameters.worldNormal;

	GBuffer.baseColor = materialInput.baseColor;
	GBuffer.metallic = materialInput.metallic;
	GBuffer.roughness = materialInput.roughness;
	GBuffer.specular = materialInput.specular;
	GBuffer.shadingModel = materialInput.shadingModel;
	float4 clipPos = mul( View.worldToClip , float4(materialParameters.worldPos, 1) );
	clipPos = materialParameters.clipPos;
	GBuffer.sceneDepth = materialParameters.NDC.z;

#if FORWARD_SHADING
	OutColor = float4( GBuffer.baseColor , 1 );
#else
	float4 GBufferA, GBufferB, GBufferC, GBufferD;
	EncodeGBuffer(GBuffer, GBufferA, GBufferB, GBufferC, GBufferD);
	OutColor  = color;
	OutColorA = GBufferA;
	OutColorB = GBufferB;
	OutColorC = GBufferC;
	OutColorD = GBufferD;
#endif
}


#endif //PIXEL_SHADER
