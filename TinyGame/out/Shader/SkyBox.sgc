#include "Common.sgc"
#include "ViewParam.sgc"

struct VSOutputParameters
{
	float3 UVs MEMBER_OUT(TEXCOORD0);
};


#if VERTEX_SHADER && !CUBE_RENDER


VS_ENTRY_START(MainVS)
	VS_INPUT(float3 InPosition , ATTRIBUTE_POSITION)
	VS_INPUT(float3 InUV, ATTRIBUTE_TEXCOORD)
	VS_OUTPUT_STRUCT(VSOutputParameters VSOutput, 0)
VS_ENTRY_END(MainVS)
{
	VSOutput.UVs = InUV;
	float4 viewPos = mul( View.worldToView , float4(InPosition, 0));
	SvPosition = mul( View.viewToClip , float4(viewPos.xyz, 1));
}

#endif

#if PIXEL_SHADER

#define  USE_CUBE_TEXTURE 1

DEFINE_TEXTURE(Texture2D, Texture);
DEFINE_TEXTURE(TextureCube, CubeTexture);
uniform float CubeLevel;


GLOBAL_CONST float2 invAtan = float2(0.1591, 0.3183);
float2 EquirectangularCoord(float3 v)
{
	float2 uv = float2(atan2(v.x, v.y), asin(v.z));
	uv *= invAtan;
	uv += 0.5;
	return uv;
}



float3 GetEnvRadiance(float3 dir)
{
#if USE_CUBE_TEXTURE
	return TEXTURE_SAMPLE_LEVEL(CubeTexture, dir , 2).rgb;
#else
	return TEXTURE_SAMPLE(Texture, EquirectangularCoord(dir)).rgb;
#endif
}

PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput , 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(MainPS)
{
	float3 color = GetEnvRadiance(VSOutput.UVs);
	OutColor = float4(color, 1);
	//OutColor = float4(color, 1);
	//OutColor = float4(1,1,1, 1);
}



#endif