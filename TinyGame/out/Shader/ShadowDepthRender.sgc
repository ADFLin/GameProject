#ifndef SHADOW_DEPTH_ONE_PASS
#define SHADOW_DEPTH_ONE_PASS 0
#endif

#if SHADOW_DEPTH_ONE_PASS
#define VERTEX_FACTORY_USE_GEOMETRY_SHADER 1
#endif

#include "Common.sgc"
#include "MaterialProcess.sgc"
#include "VertexFactoryProcess.sgc"
#include "ShadowCommon.sgc"
#include "LightingCommon.sgc"


#ifndef SHADOW_LIGHT_TYPE
#define SHADOW_LIGHT_TYPE LIGHTTYPE_POINT
#endif

#define VERTEX_FACTORY_NEED_INTERPOLANTS 1


uniform mat4 DepthShadowMatrix;


struct PassInterpolantsParam
{
	float4 worldPos;
};

struct VertexOutputParamVSToPS
{
#if VERTEX_FACTORY_NEED_INTERPOLANTS
	FactoryInterpolantsParam   factoryInterpolants;
#endif
	PassInterpolantsParam      passInterpolants;
};

#if VERTEX_SHADER

VS_ENTRY_START(MainVS)
	VS_INPUT_PARAMETERS(VertexFactoryInputParameters VertexInput)
	VS_OUTPUT_STRUCT(VertexOutputParameters OutputVS, 0)
VS_ENTRY_END(MainVS)
{
	VertexFactoryIntermediatesVS intermediates = VertexFactory_GetIntermediatesVS(VERTEX_INPUT_PARAM(VertexInput));

	float4 worldPosExcludingWPO = VertexFactory_GetWorldPosition(VERTEX_INPUT_PARAM_COMMA(VertexInput) intermediates);

	MaterialParametersVS materialParameters = VertexFactory_GetMaterialParameterVS(VERTEX_INPUT_PARAM_COMMA( VertexInput ) intermediates);
	float4 worldPos = worldPosExcludingWPO;

	MaterialOutputVS materialOutput = Material_GetOutputVS(materialParameters);

	worldPos.xyz += materialOutput.worldOffset;

	OutputVS.factoryInterpolants = VertexFactory_GetInterpolants(VERTEX_INPUT_PARAM_COMMA(VertexInput) intermediates, materialParameters);
	float4 outPosition = mul( DepthShadowMatrix , float4( VertexFactory_GetWorldPos(OutputVS.factoryInterpolants) , 1 ) );

	OutputVS.passInterpolants.worldPos = worldPos;
	SvPosition = outPosition;

}
#endif //VERTEX_SHADER

#if SHADOW_DEPTH_ONE_PASS

#if GEOMETRY_SHADER
void MainGS()
{
	for( int face = 0; face < 6; ++face )
	{




	}
}

#endif //GEOMETRY_SHADER

#endif //SHADOW_DEPTH_ONE_PASS

#if PIXEL_SHADER

PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT(VertexOutputParamVSToPS InputPS, 0)
#if MATERIAL_USE_DEPTH_OFFSET
	PS_OUTPUT_DEPTH
#endif
PS_ENTRY_END(MainPS)
{
	MaterialParametersPS materialParameters = VertexFactory_GetMaterialParameterPS(InputPS.factoryInterpolants);
	float4 NDC = SvPositionToNDC(SvPosition);
	float3 worldPos = InputPS.passInterpolants.worldPos;
	Material_CalcParametersPS(materialParameters, SvPosition, worldPos);
	MaterialOutputPS materialOutput = Material_GetOutputPS(materialParameters);

#if MATERIAL_USE_DEPTH_OFFSET
	worldPos = Material_CorrectWorldPosByDepthOffset(materialOutput, materialParameters, SvDepth);
#endif
}

#endif //PIXEL_SHADER