#include "Common.sgc"
#include "ScreenVertexShader.sgc"
#include "PostProcessCommon.sgc"

#if PIXEL_SHADER

in VSOutputParameters VSOutput;
layout(location = 0) out float4 OutColor;

float LinearToSRGB(float value)
{
	const float a = 0.055;
	if( value <= 0.00304 )
		return 12.92 * value;

	return (1 + a) * pow(value, 1.0 / 2.4) - a;
}
const float Gamma = 2.2;
vec3 simpleReinhardToneMapping(vec3 color)
{
	float exposure = 1.;
	color *= exposure / (1. + color / exposure);
	color = pow(color, vec3(1. / Gamma));
	return color;
}

vec3 lumaBasedReinhardToneMapping(vec3 color)
{
	float luma = dot(color, vec3(0.2126, 0.7152, 0.0722));
	float toneMappedLuma = luma / (1. + luma);
	color *= toneMappedLuma / luma;
	color = pow(color, vec3(1. / Gamma));
	return color;
}

void MainPS()
{
	float4 color = texture(TextureInput0, VSOutput.UVs);

	//color.rgb = lumaBasedReinhardToneMapping(color.rgb);

	OutColor.rgb = color.rgb;
	OutColor.r = LinearToSRGB(color.r);
	OutColor.g = LinearToSRGB(color.g);
	OutColor.b = LinearToSRGB(color.b);
	OutColor.a = color.a;
}

#endif