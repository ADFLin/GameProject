#include "Common.sgc"
#include "ViewParam.sgc"

#ifndef USE_OIT
#define USE_OIT 0
#endif

#if USE_OIT
#include "OITCommon.sgc"
#endif

struct OutputVSParam
{
	int    vertexId;
	float4 color;
	float3 normal;
};

#if VERTEX_SHADER

layout(location = ATTRIBUTE_POSITION) in float3 InPos;
layout(location = ATTRIBUTE_COLOR) in float4 InColor;
layout(location = ATTRIBUTE_NORMAL) in float3 InNormal;

out OutputVSParam OutputVS;
void MainVS()
{
	OutputVS.vertexId = gl_VertexID;
	OutputVS.normal = InNormal;
	OutputVS.color = InColor;
	gl_Position = float4(InPos, 1);
}

#endif //VERTEX_SHADER

struct OutputGSParam
{
	float4 color;
};

#if GEOMETRY_SHADER
in OutputVSParam OutputVS[];
out OutputGSParam OutputGS;
layout(points, invocations = 1) in;
layout(line_strip, max_vertices = 2) out;

uniform int2   DensityAndSize = int2(1,1);
uniform float NormalLength = 1.0;
void MainGS()
{
	int cx = OutputVS[0].vertexId % DensityAndSize.y;
	int cy = OutputVS[0].vertexId / DensityAndSize.y;
	if( cx % DensityAndSize.x == 0 && cy % DensityAndSize.x == 0 )
	{
		float3 pos = gl_in[0].gl_Position.xyz;
		gl_Position = View.worldToClip * float4(pos, 1.0);
		OutputGS.color = OutputVS[0].color;
		EmitVertex();

		gl_Position = View.worldToClip * float4(pos + NormalLength * OutputVS[0].normal, 1.0);
		OutputGS.color = OutputVS[0].color;
		EmitVertex();

		EndPrimitive();
	}

}
#endif //GEOMETRY_SHADER


#if PIXEL_SHADER
in OutputGSParam OutputGS;
layout(location = 0) out float4 OutColor;

#if USE_OIT
layout(early_fragment_tests) in;
#endif

void MainPS()
{
#if USE_OIT
	float pixelDepth = -(View.worldToView * float4(OutputVS.pos, 1)).z;
	OITProcessPS(OutputGS.color, pixelDepth);
	OutColor = float4(0, 0, 0, 1);
#else
	OutColor = float4(1,0,0,1);
#endif
}

#endif //PIXEL_SHADER