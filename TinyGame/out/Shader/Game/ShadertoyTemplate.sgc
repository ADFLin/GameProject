#ifndef COMPUTE_DISCARD_SIM
#define COMPUTE_DISCARD_SIM 0
#endif

#ifndef RENDER_IMAGE
#define RENDER_IMAGE 0
#endif
#ifndef RENDER_BUFFER
#define RENDER_BUFFER 0
#endif
#ifndef RENDER_CUBE
#define RENDER_CUBE 0
#endif
#ifndef RENDER_SOUND
#define RENDER_SOUND 0
#endif

#ifndef RENDER_CUBE_ONE_PASS
#define RENDER_CUBE_ONE_PASS 0
#endif

#include "Common.sgc"
#if PIXEL_SHADER
#include "ScreenVertexShader.sgc"
#elif COMPUTE_SHADER
#if COMPUTE_DISCARD_SIM
bool bDiscardPixel;
#define discard { bDiscardPixel = true; return; }
#endif
#endif

#define buffer buffer_ST_
#undef  PI

#if VERTEX_SHADER

#if COMPILER_GLSL
#extension GL_ARB_shader_viewport_layer_array : enable
#endif

VS_ENTRY_START(CubeOnePassVS)
	VS_INPUT(float4 InPosition, ATTRIBUTE_POSITION)
	VS_INPUT_INSTANCEID
	VS_OUTPUT_RENDERTARGET_IDNEX
VS_ENTRY_END(CubeOnePassVS)
{
	SvPosition = InPosition;
	SvRenderTargetIndex = SvInstanceID;
}

#else


layout(std140) cbuffer InputBlock
{
	float3 iResolution;
	float  iTime;
	float  iTimeDelta;
	int    iFrame;
	float  iFrameRate;
	float  iSampleRate;
	float4 iMouse;
	float4 iDate;
};

uniform float3 iChannelResolution[4];

%s

%s

%s

#if RENDER_IMAGE || RENDER_BUFFER
void mainImage(out float4 fragColor, in float2 fragCoord);
float4 Render(float2 fragCoord)
{
	float4 fragColor;
	mainImage(fragColor, fragCoord);
	return fragColor;
}
#elif RENDER_CUBE

void mainCubemap(out float4 fragColor, in float2 fragCoord, in float3 ro, in float3 rd);

#if RENDER_CUBE_ONE_PASS
uniform float3 iFaceDir[6];
uniform float3 iFaceUDir[6];
uniform float3 iFaceVDir[6];
#else
uniform float3 iFaceDir;
uniform float3 iFaceUDir;
uniform float3 iFaceVDir;
#endif
uniform float3 iOrigin;
uniform float2 iViewportSize;

#if RENDER_CUBE_ONE_PASS
float4 Render(float2 fragCoord, uint faceIndex)
#else
float4 Render(float2 fragCoord)
#endif
{
	float2 uv = fragCoord / iViewportSize;
#if RENDER_CUBE_ONE_PASS
	float3 rd = normalize(iFaceDir[faceIndex] + (2 * uv.x - 1) * iFaceUDir[faceIndex] + (2 * uv.y - 1) * iFaceVDir[faceIndex]);
#else
	float3 rd = normalize(iFaceDir + (2 * uv.x - 1) * iFaceUDir + (2 * uv.y - 1) * iFaceVDir);
#endif
	float4 fragColor;
	mainCubemap(fragColor, fragCoord, iOrigin, rd);
	return fragColor;
}
#elif RENDER_SOUND
uniform float iTimeOffset;
uniform int iSampleOffset;
#ifndef SOUND_TEXTURE_SIZE
#define SOUND_TEXTURE_SIZE 512
#endif
float2 mainSound(in int samp, float time);
float4 Render(float2 fragCoord)
{
	float t = iTimeOffset + ((fragCoord.x-0.5) + (fragCoord.y-0.5)*float(SOUND_TEXTURE_SIZE))/iSampleRate;
	int   s = iSampleOffset + int(fragCoord.x - 0.2) + int(fragCoord.y-0.2)*SOUND_TEXTURE_SIZE;
	float2 y = mainSound( s, t );
	float2 v  = floor((0.5+0.5*y)*65536.0);
	float2 vl = mod(v,256.0)/255.0;
	float2 vh = floor(v/256.0)/255.0;

	return float4(vl.x,vh.x,vl.y,vh.y);
}
#endif


#if PIXEL_SHADER

PS_ENTRY_START(MainPS)
	PS_OUTPUT(float4 OutColor, 0)
#if RENDER_CUBE_ONE_PASS
	PS_INPUT_RENDERTARGET_IDNEX
#endif
PS_ENTRY_END(MainPS)
{
	float4 fragColor;
	float2 fragCoord = SvPosition.xy;
#if RENDER_CUBE_ONE_PASS
	OutColor = Render(fragCoord, SvRenderTargetIndex);
#else
	OutColor = Render(fragCoord);
#endif
}

#endif

#if COMPUTE_SHADER

#ifndef GROUP_SIZE
#define GROUP_SIZE 8
#endif

#if COMPILER_HLSL
RWTexture2D<float4> OutTexture;
#else
layout(rgba32f) uniform writeonly image2D OutTexture;
#endif

CS_NUM_THREADS(GROUP_SIZE, GROUP_SIZE, 1)
CS_ENTRY(MainCS)
{
	float2 fragCoord = float2(SvDispatchThreadID.x, SvDispatchThreadID.y) + 0.5;
#if RENDER_IMAGE
	if (fragCoord.x > iResolution.x || fragCoord.y > iResolution.y)
		return;
#elif RENDER_CUBE
	if (fragCoord.x > iViewportSize.x || fragCoord.y > iViewportSize.y)
		return;
#elif RENDER_SOUND
	if (fragCoord.x > SOUND_TEXTURE_SIZE || fragCoord.y > SOUND_TEXTURE_SIZE)
		return;
#endif

#if COMPUTE_DISCARD_SIM
	bDiscardPixel = false;
#endif
	float4 fragColor = Render(fragCoord);
#if COMPUTE_DISCARD_SIM
	if (bDiscardPixel)
		return;
#endif

#if COMPILER_HLSL
	OutTexture[SvDispatchThreadID.xy] = fragColor;
#else
	imageStore(OutTexture, int2(SvDispatchThreadID.xy), fragColor);
#endif
}

#endif


#endif //VERTEX_SHADER
