#pragma once
#include "MaterialCommon.sgc"
#include "ViewParam.sgc"

//Material Template
#if 0
#if VERTEX_SHADER
void  CalcMaterialInputVS(inout MaterialInputVS inputVS, in MaterialParametersVS parameters)
{
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER
void CalcMaterialInputPS(inout MaterialInputPS inputPS, in MaterialParametersPS parameters)
{
}
#endif //PIXEL_SHADER
#endif
#if PIXEL_SHADER

float3 GetMaterialWorldNormal(in MaterialInputPS inputPS, inout MaterialParametersPS parameters)
{
#if MATERIAL_USE_WORLD_NORMAL
	return inputPS.normal;
#else

	return normalize(parameters.tangentToWorld * inputPS.normal);
#endif
}

float3 GetMaterialWorldPositionAndCheckDepthOffset(in MaterialInputPS inputPS, inout MaterialParametersPS parameters, out float outDepth)
{
	float3 worldPos = parameters.worldPos;
#if MATERIAL_USE_DEPTH_OFFSET
	float4 NDC = parameters.NDC;
	if( inputPS.depthOffset != 0 )
	{
		NDC.z += inputPS.depthOffset;
		float4 worldPosH = View.clipToWorld * NDC;
		worldPos = worldPosH.xyz / worldPosH.w;
	}
	outDepth = NDC.z;
#endif
	return worldPos;
}

void CalcMaterialParameters(inout MaterialInputPS inputPS, inout MaterialParametersPS parameters)
{

	CalcMaterialInputPS(inputPS, parameters);

#if MATERIAL_BLENDING_MASKED
	if(inputPS.mask < 0.01 )
		discard;
#endif
}

#endif //PIXEL_SHADER