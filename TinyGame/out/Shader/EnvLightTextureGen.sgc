#include "Common.sgc"
#include "ScreenVertexShader.sgc"
#include "LightingCommon.sgc"

#define  USE_CUBE_TEXTURE 1

#if PIXEL_SHADER

uniform float3 FaceDir;
uniform float3 FaceUpDir;

DEFINE_TEXTURE( Texture2D , Texture );
DEFINE_TEXTURE( TextureCube, CubeTexture );

GLOBAL_CONST float2 invAtan = float2(0.1591, 0.3183);
float2 EquirectangularCoord(float3 v)
{
	float2 uv = float2(atan2(v.x, v.y), asin(v.z));
	uv *= invAtan;
	uv += 0.5;
	return uv;
}


float3x3 TangentToWorldTransform(float3 N)
{
	float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
	float3 tangent = normalize(cross(up, N));
	float3 bitangent = cross(N, tangent);

	return float3x3(tangent, bitangent, N);
}

float3 GetEnvRadiance(float3 dir)
{
#if USE_CUBE_TEXTURE
	return TEXTURE_SAMPE(CubeTexture, dir).rgb;
#else
	return TEXTURE_SAMPE(Texture, EquirectangularCoord(dir)).rgb;
#endif
}

float3 GetFaceCameraDir(float2 faceUV)
{
	float2 NDC = 2 * faceUV - 1;
	float3 faceRightDir = normalize( cross(FaceDir, FaceUpDir) );
	return normalize(FaceDir + NDC.x * faceRightDir + NDC.y * FaceUpDir);
}

#if SHADER_ENTRY_EquirectangularToCubePS
PS_ENTRY_START(EquirectangularToCubePS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(EquirectangularToCubePS)
{
	float3 dir = GetFaceCameraDir(VSOutput.UVs);
	float3 color = TEXTURE_SAMPE(Texture, EquirectangularCoord(dir)).rgb;
	OutColor = float4(color, 1);
}
#endif

uniform int2 IrrianceSampleCount = int2( 256 * 2 , 200 * 2 );

#if  SHADER_ENTRY_IrradianceGenPS
PS_ENTRY_START(IrradianceGenPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(IrradianceGenPS)
{
	float3 N = GetFaceCameraDir(VSOutput.UVs);
	float3x3 tangentToWorld = TangentToWorldTransform(N);

	float dPhi = 2.0 * PI / IrrianceSampleCount.x;
	float dTheta = 0.5 * PI / IrrianceSampleCount.y;
	float3 irradiance = float3(0, 0, 0);
#if 0
	
	for( int m = 0; m < IrrianceSampleCount.x; ++m )
	{
		float2 csPhi;
		sincos(float(m) * dPhi, csPhi.y, csPhi.x);
		for( int n = 0; n < IrrianceSampleCount.y; ++n )
		{
			float2 csTheta;
			sincos(float(n) * dTheta, csTheta.y, csTheta.x);
			float3 L = normalize(tangentToWorld * float3(csTheta.y * csPhi, csTheta.x));
			irradiance += csTheta.x * csTheta.y * GetEnvRadiance(L);
		}
	}
#else

	for( float phi = 0; phi <  2.0 * PI; phi += dPhi )
	{
		float2 csPhi;
		sincos(phi, csPhi.y, csPhi.x);
		for( float theta = 0; theta < 0.5 * PI; theta += dTheta )
		{
			float2 csTheta;
			sincos(theta, csTheta.y, csTheta.x);
			float3 L = normalize( mul(tangentToWorld , float3(csTheta.y * csPhi, csTheta.x)));
			irradiance += csTheta.x * csTheta.y * GetEnvRadiance(L);
		}
	}
#endif

	irradiance *= PI / (IrrianceSampleCount.x * IrrianceSampleCount.y);
	OutColor = float4(irradiance, 1);

}
#endif


float RadicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
	return float2(float(i) / float(N), RadicalInverse_VdC(i));
}


float3 ImportanceSampleGGX(float2 Xi,float roughness)
{
	float a = roughness*roughness;

	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

	// from spherical coordinates to cartesian coordinates
	float3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	return H;
}
uniform float Roughness;
uniform int PrefilterSampleCount = 2048 * 2;

#if SHADER_ENTRY_PrefilteredGenPS
PS_ENTRY_START(PrefilteredGenPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(PrefilteredGenPS)
{

	float3 N = GetFaceCameraDir(VSOutput.UVs);
	float3 R = N;
	float3 V = R;

	float3x3 tangentToWorld = TangentToWorldTransform(N);

	float totalWeight = 0.0;
	float3 prefilteredColor = float3(0.0,0.0,0.0);
	for( uint i = 0u; i < PrefilterSampleCount; ++i )
	{
		float2 Xi = Hammersley(i, PrefilterSampleCount);
		float3 H = normalize( mul(tangentToWorld , ImportanceSampleGGX(Xi, Roughness)) );
		float3 L = normalize(2.0 * dot(V, H) * H - V);

		float NoL = saturate(dot(N, L));
		if( NoL > 0.0 )
		{
			prefilteredColor += GetEnvRadiance(L).rgb * NoL;
			totalWeight += NoL;
		}
	}
	prefilteredColor = prefilteredColor / totalWeight;

	OutColor = float4(prefilteredColor, 1.0);
}
#endif

uniform int BRDFSampleCount = 1024 * 2;
float2 IntegrateBRDF(float NoV, float roughness)
{
	float3 V;
	V.x = sqrt(1.0 - NoV*NoV);
	V.y = 0.0;
	V.z = NoV;

	float A = 0.0;
	float B = 0.0;

	float3 N = float3(0.0, 0.0, 1.0);
	float3x3 tangentToWorld = TangentToWorldTransform(N);
	for( uint i = 0u; i < BRDFSampleCount; ++i )
	{
		float2 Xi = Hammersley(i, BRDFSampleCount);
		float3 H = normalize( mul(tangentToWorld , ImportanceSampleGGX(Xi, Roughness)) );
		float3 L = normalize(2.0 * dot(V, H) * H - V);

		float NoL = saturate(L.z);
		float NoH = saturate(H.z);
		float VoH = saturate(dot(V, H));

		if( NoL > 0.0 )
		{
			float G = Vis_SmithIBL(roughness, NoV, NoL);
			float G_Vis = (G * VoH) / (NoH * NoV);
			float Fc = pow(1.0 - VoH, 5.0);

			A += (1.0 - Fc) * G_Vis;
			B += Fc * G_Vis;
		}
	}
	A /= float(BRDFSampleCount);
	B /= float(BRDFSampleCount);
	return float2(A, B);
}

#if SHADER_ENTRY_PreIntegrateBRDFGenPS
PS_ENTRY_START(PreIntegrateBRDFGenPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(PreIntegrateBRDFGenPS)
{
	float2 integratedBRDF = IntegrateBRDF( VSOutput.UVs.x , VSOutput.UVs.y );
	OutColor = float4( integratedBRDF , 0 , 1 );
}
#endif


#endif //PIXEL_SHADER