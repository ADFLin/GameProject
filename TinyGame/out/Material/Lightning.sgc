#define MATERIAL_TEXCOORD_NUM 1
#define MATERIAL_BLENDING_MASKED 0
#define MATERIAL_USE_DEPTH_OFFSET 0

#include "MaterialCommon.sgc"
#include "ViewParam.sgc"

uniform sampler2D TextureBase;
uniform sampler2D TextureB;
uniform sampler2D TextureC;

#if VERTEX_SHADER

void  CalcMaterialInputVS(inout MaterialInputVS inputVS, inout MaterialParametersVS parameters)
{
	inputVS.worldOffset = float3(0, 0, 0);
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

void CalcMaterialInputPS(inout MaterialInputPS inputPS, inout MaterialParametersPS parameters)
{
	float2 UV = float2(parameters.texCoords[0].x, 1 - parameters.texCoords[0].y);
	float3 colorA = texture(TextureBase, UV).rgb;
	float3 colorB = texture(TextureB, UV).rgb;
	float3 colorC = texture(TextureC, UV).rgb;

	inputPS.baseColor = colorA;
	//inputPS.emissiveColor = colorB;
	//inputPS.baseColor = float3(1,1,1) * float3( parameters.worldPos.xy , 0 );
	inputPS.metallic = 0.9;
	inputPS.roughness = 0.5;
	inputPS.specular = 0.2;
	inputPS.opacity = 0.5;
	//float2 value = 2 * frac(10 * (parameters.worldPos.x + parameters.worldPos.y + parameters.worldPos.z )) - 1;
	//float2 value = 2 * frac(10 * (parameters.worldPos.xy)) - 1;
	//inputPS.mask = value.x * value.y > 0 ? 1 : 0;
	inputPS.normal = GetTextureNormal( TEXTURE_SAMPLE(TextureB , UV) );
}

#endif //PIXEL_SHADER