#include "ViewParam.sgc"
#include "GeometryTestCommon.sgc"

struct SphereData
{
	float3 worldPos;
	float  radius;
	float3 baseColor;
};

uniform SphereData Sphere;
uniform float2   DepthParam;

uniform float3 LightPos[] = ARRAY_DATA_BEGIN(float3) float3( 0 , 10 , 10 ) , float3( 0 , -10 , 10 ) , float3( 0 , 0 , -30 ) , float3( -30 , 0 , 10 ) ARRAY_DATA_END;
uniform float3 LightColor[] = ARRAY_DATA_BEGIN(float3) float3( 0.3 , 0 , 0 ) , float3( 0 , 0.4 , 0 ) , float3( 0 , 0 , 0.5 ) , float3( 0.1 , 0 , 0.2 ) ARRAY_DATA_END;


struct VSOutputParameters
{
	MEMBER_OUTPUT(float3 cameraOffset , TEXCOORD0);
};

#if VERTEX_SHADER

float CalcVertexOffset(float2 p , float r , float factor )
{
	float rf = r * factor;
#if 1
	if ( p.y > -r )
	{
		// m = ( x * y (-/+) r * sqrt( d ) ) / ( d - y * y ); d = x*x + y*y - r*r
		// 1 / m = ( x * y (+/-) r * sqrt( d ) ) / ( d - x * x );
		float d = dot( p , p ) - r * r;
		if ( d > 0 )
		{
			if ( p.y > r || p.x * factor < 0 )
			{
				float a = p.x * p.y + rf * sqrt( d );
				float b = d - p.x * p.x;
				if ( b != 0 )
					return ( p.y + r ) * a / b - p.x + 0.01 * rf;
			}
		}
		else
		{
			return 4 * rf;
		}
	}
#else
	float d = dot( p , p ) - r * r;
	if ( d > 0 )
	{

	}
	else
	{
		return 4 * rf;
	}

#endif
	return 3 * rf;
}


VS_ENTRY_START(MainVS)
	VS_INPUT(float4 InPosition, ATTRIBUTE_POSITION)
	VS_OUTPUT_STRUCT_LAST(VSOutputParameters VSOutput, 0)
VS_ENTRY_END(MainVS)
{
	float3 spherePosInView = mul( View.worldToView , float4(Sphere.worldPos, 1.0) ).xyz;
	float3 offsetInView = float3(
		CalcVertexOffset(float2(spherePosInView.x, -spherePosInView.z), Sphere.radius, InPosition.x),
		CalcVertexOffset(float2(spherePosInView.y, -spherePosInView.z), Sphere.radius, InPosition.y),
		-Sphere.radius);

	VSOutput.cameraOffset = Sphere.worldPos + mul( View.viewToWorld , float4(offsetInView, 0) ).xyz - View.worldPos;
	SvPosition = mul( View.viewToClip , float4(spherePosInView + offsetInView, 1.0) );
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

#define FSINPUT_LOCAL_SPACE
struct FSInput 
{
	float3 viewDir;
	float3 normal;
	float3 worldPos;
};


float Remap(float v, float is, float ie, float os, float oe)
{
	return lerp(os, oe, (v - is) / (ie - is));

}

float3 CalcLighting( in FSInput inFS )
{
	float power = 0.8;
	float factor = -dot( View.direction , inFS.normal );
	return pow( factor , power ) * Sphere.baseColor;

	float3 P = inFS.worldPos;
	float3 N = inFS.normal;
	float3 E = inFS.viewDir;

	float3 color = float3(0,0,0);
	for( int i = 0 ; i < 4 ; ++i )
	{
		float3 L = normalize( LightPos[i] - P );
		float diff = clamp( dot( L , N ) , 0.0 , 1.0 );
		float spec = 0;

		if ( diff > 0 )
		{
			float3 R = normalize(-reflect(L,N));
			spec = clamp( pow( max( dot(R,E), 0.0 ) , 20.0 ) , 0.0 , 1.0 );
			//vec3 H = normalize( L + E );  
			//spec = clamp( pow( max( dot(H,N), 0.0 ) , 100.0 ) , 0.0 , 1.0 );
		}
		color += ( diff + spec ) * LightColor[i];
	}
	return color;
}


PS_ENTRY_START(MainPS)
	PS_INPUT( VSOutputParameters VSOutput , 0 )
	PS_OUTPUT_LAST( float4 OutColor , 0 )
PS_ENTRY_END(MainPS)
{
	float3  cameraDir = normalize(VSOutput.cameraOffset);
	float t;
	if( !RaySphereTest(View.worldPos, cameraDir, Sphere.worldPos, Sphere.radius, t) )
	{
#define USE_ALPHA_TO_COVERAGE 1
		float alpha = saturate(Remap(abs(Sphere.radius - t), 0, 0.19, 1, 0));

#if USE_ALPHA_TO_COVERAGE
		OutColor = float4(Sphere.baseColor * 0.5 , 0);
		discard;
#else
#define USE_DEBUG_SHOW 1
#if USE_DEBUG_SHOW
		discard;
#else
		float4 NDC = View.worldToClip * float4(View.worldPos + VSOutput.cameraOffset, 1.0);
		WritePixelDepth(NDC.z / NDC.w);
		//gl_FragColor = vec4( 0.5 * vd + 0.5 , 1.0 );
		OutColor = float4(1.0, 1.0, 0, 1.0);
		return;
#endif
#endif
	}

	FSInput inFS;
	float3 vL = View.worldPos + cameraDir * t;
	inFS.worldPos = vL;
	inFS.normal = normalize(vL - Sphere.worldPos);
	inFS.viewDir = normalize(View.worldPos - vL);

	float4 NDC = mul( View.worldToClip , float4(inFS.worldPos, 1.0) );
	WritePixelDepth(NDC.z / NDC.w);

	float3 color = CalcLighting( inFS );
	OutColor = float4( color , 1 );
	//OutColor = float4( 1,1,1, 1);
}

#endif //PIXEL_SHADER
