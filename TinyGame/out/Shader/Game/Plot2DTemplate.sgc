#include "Common.sgc"
#include "ScreenVertexShader.sgc"

#ifndef USE_CUSTOM_DIF_FUNC
#define USE_CUSTOM_DIF_FUNC 0
#endif

#ifndef USE_DIF_2_ORDER
#define USE_DIF_2_ORDER 0
#endif



float Func(float x, float t)
{
%s
}

uniform float E;

float DF(float x, float t)
{
#if USE_CUSTOM_DIF_FUNC
%s
#else
	return (Func(x + E, t) - Func(x - E, t)) /(2 * E);
#endif
}

#if USE_DIF_2_ORDER
float D2F(float x, float t)
{
%s
}
#endif

uniform float4 OffsetAndScale;
uniform float Time;
uniform float HalfWidth;
uniform float4 Color;

#if PIXEL_SHADER

PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(MainPS)
{
	float2 p = OffsetAndScale.xy + VSOutput.UVs *  OffsetAndScale.zw;

	float f = Func(p.x, Time);
	float df = DF(p.x, Time);
#if USE_DIF_2_ORDER
	float d2f = D2F(p.x, Time);
	float a = 0.5 * abs(d2f);
	float b = sqrt(1 + df * df);
	float c = -abs(p.y - f);
	float e;
	if (a == 0)
	{
		e = -c / b;
	}
	else
	{
		e = abs((-b + sqrt( b*b - 4*a*c ) ) / (2*a));
	}
#else
	float e = abs(p.y - f) / sqrt(1 + df * df);
#endif
	
	if (e > HalfWidth)
	{
		OutColor = float4(0,0,0,0);
	}
	else
	{
		OutColor = Color;
	}
}
