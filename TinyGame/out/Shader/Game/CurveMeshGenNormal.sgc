
#include "Common.sgc"


#ifndef USE_SHARE_TRIANGLE_INFO
#define USE_SHARE_TRIANGLE_INFO 1
#endif

#ifndef USE_COMPACTED_SHARE_TRIANGLE_INFO
#define USE_COMPACTED_SHARE_TRIANGLE_INFO 1
#endif
#if COMPUTE_SHADER


struct NormalGenParamsData
{
	uint   totalCount;
	uint   vertexStride;
	uint   normalOffset;
	uint   padding;
};


#if SHADER_COMPILING
layout(std140) cbuffer NormalGenParamsDataBlock
{
	NormalGenParamsData GenParams;
};
#else
uniform NormalGenParamsData GenParams;
#endif


DEFINE_STRUCTURED_BUFFER(float, VertexInput);

#if USE_SHARE_TRIANGLE_INFO
DEFINE_STRUCTURED_BUFFER(float, VertexOutput);
#else
DEFINE_STRUCTURED_BUFFER(uint, VertexOutput);
void UpdateValue(uint index, float Add)
{
	uint oldValue = VertexOutput[index];
	for (;;)
	{
		uint newValue = asuint(asfloat(oldValue) + Add);
		uint value;
		InterlockedCompareExchange(VertexOutput[index], oldValue, newValue, value);
		if (value == oldValue)
			break;

		oldValue = value;
	}
}
#endif

DEFINE_STRUCTURED_BUFFER(uint, TriangleIndices);
DEFINE_STRUCTURED_BUFFER(uint, ShareTriangleInfos);
DEFINE_STRUCTURED_BUFFER(uint, TriangleIdList);

float3 ReadPosition(uint vertexId)
{
	uint posIndex = vertexId * GenParams.vertexStride;
	return float3(VertexInput[posIndex + 0], VertexInput[posIndex + 1], VertexInput[posIndex + 2]);
}

void WriteNormal(uint vertexId, float3 N)
{
	uint normalIndex = vertexId * GenParams.vertexStride + GenParams.normalOffset;
#if USE_SHARE_TRIANGLE_INFO
	VertexOutput[normalIndex + 0] = N.x;
	VertexOutput[normalIndex + 1] = N.y;
	VertexOutput[normalIndex + 2] = N.z;
#else
	UpdateValue(normalIndex + 0, N.x);
	UpdateValue(normalIndex + 1, N.y);
	UpdateValue(normalIndex + 2, N.z);
#endif
}


float3 CalcNormal(uint triangleId)
{
	uint i0 = TriangleIndices[3 * triangleId + 0];
	uint i1 = TriangleIndices[3 * triangleId + 1];
	uint i2 = TriangleIndices[3 * triangleId + 2];

	float3 p0 = ReadPosition(i0);
	float3 p1 = ReadPosition(i1);
	float3 p2 = ReadPosition(i2);

	return normalize(cross(p1 - p0, p2 - p0));
}


CS_NUM_THREADS(16, 1, 1)
CS_ENTRY(MainCS)
{
#if USE_SHARE_TRIANGLE_INFO

	uint vertexIndex = SvDispatchThreadID.x;
	if (vertexIndex >= GenParams.totalCount)
		return;

#if USE_COMPACTED_SHARE_TRIANGLE_INFO
	uint shareValue = ShareTriangleInfos[vertexIndex];
	uint triIndexOffset = shareValue >> 4;
	uint numTri = shareValue & 0xf;
#else
	uint triIndexOffset = ShareTriangleInfos[2 * vertexIndex + 0];
	uint numTri = ShareTriangleInfos[2 * vertexIndex + 1];
#endif
	float3 N = float3(0, 0, 0);
	for (uint i = 0; i < numTri; ++i)
	{
		uint triangleId = TriangleIdList[triIndexOffset + i];
		N += CalcNormal(triangleId);
	}

	WriteNormal(vertexIndex, normalize(N));
#else
	uint triangleId = SvDispatchThreadID.x;
	if (triangleId >= GenParams.totalCount)
		return;

	float3 N = CalcNormal(triangleId);

	uint i0 = TriangleIndices[3 * triangleId + 0];
	uint i1 = TriangleIndices[3 * triangleId + 1];
	uint i2 = TriangleIndices[3 * triangleId + 2];
	WriteNormal(i0, N);
	WriteNormal(i1, N);
	WriteNormal(i2, N);
#endif
}

#endif