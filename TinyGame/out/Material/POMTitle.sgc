#define MATERIAL_TEXCOORD_NUM 1
#define MATERIAL_BLENDING_MASKED 1
#define MATERIAL_USE_DEPTH_OFFSET 1

#include "MaterialCommon.sgc"
#include "ViewParam.sgc"
#include "ParallaxOcclusionCommon.sgc"

uniform sampler2D BaseTexture;
uniform sampler2D NoramlTexture;
uniform float3    DispFactor;
uniform float3    TileUVScale = float3(1,1,1);
#if VERTEX_SHADER

void CalcMaterialOutnputVS(inout MaterialOutputVS outputVS, inout MaterialParametersVS parameters)
{
	outputVS.worldOffset = float3(0.0);
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

void CalcMaterialOutputPS(inout MaterialOutputPS outputPS, inout MaterialParametersPS parameters)
{
	float3 viewVector = View.worldPos - parameters.worldPos;
	float3 viewVectorTangent = viewVector * parameters.tangentToWorld;

	POMParameters pomParams;
	pomParams.dispMask = float4(0, 0, 0, DispFactor.x);
	pomParams.dispBias = DispFactor.y;
	pomParams.parallaxScale = 0.2;
	pomParams.iteratorParams = float2(20,120);
	pomParams.shadowIteratorParams = float2(15, 128);

	POMOutput pomOutput = POMapping(NoramlTexture , pomParams, normalize(viewVectorTangent), parameters.texCoords[0].xy * TileUVScale.xy );

	outputPS.shadingModel = SHADINGMODEL_DEFAULT_LIT;
	outputPS.baseColor = texture(BaseTexture, pomOutput.UVs).rgb;
	//outputPS.emissiveColor = texture(BaseTexture, pomOutput.UVs) * parameters.vectexColor;
	//outputPS.emissiveColor = normalize(parameters.tangentToWorld[0]);
	outputPS.metallic = 0.9;
	outputPS.roughness = 0.5;
	outputPS.specular = 0.1;
	outputPS.normal = GetTextureNormal( TEXTURE_SAMPLE( NoramlTexture, pomOutput.UVs ) );
#if 1
	if( pomOutput.depth > 0 )
		outputPS.depthOffset = CalcPOMCorrectDepth(pomOutput, parameters.tangentToWorld, viewVectorTangent) - parameters.screenPos.z;
	else
		outputPS.depthOffset = 0;
#endif
	float2 value = 2 * frac(5 * (parameters.texCoords[0].xy)) - 1;
	//outputPS.mask = value.x * value.y > 0 ? 1 : 0;
	//outputPS.emissiveColor = abs( float3(0.3, 0.3, 0.3) * parameters.worldNormal );
}

#endif //PIXEL_SHADER