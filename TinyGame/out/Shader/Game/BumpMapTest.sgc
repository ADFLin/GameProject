#include "Common.sgc"

#if VERTEX_SHADER
uniform float3 LightPos = float3( 0 , -10 , 5 );

varying float3 lightOffset;
varying float3 viewOffset;

void main()
{
	float3 tang   = normalize( gl_NormalMatrix * gl_MultiTexCoord5.xyz );
	float3 normal = normalize( gl_NormalMatrix * gl_Normal );
	float3 binormal = cross( normal , tang );

	mat3 tbn  = mat3( tang , binormal , normal );
	float3 pos = float3( gl_ModelViewMatrix * gl_Vertex );

	float3 dir = float3( gl_ModelViewMatrix * float4( LightPos , 1.0 ) ) -  pos;
	lightOffset = dir * tbn;
	viewOffset   = ( -pos ) * tbn ;

	gl_Position = ftransform();
	gl_TexCoord[0] = gl_TextureMatrix[0] * gl_MultiTexCoord0;

}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

uniform sampler2D texBase;
uniform sampler2D texNormal;

varying float3 lightOffset;
varying float3 viewOffset;

void main()
{
	float2 st = gl_TexCoord[0].st;

	float3 N = texture(texNormal, st).xyz * 2.0 - 1.0;
	float3 baseColor = texture(texBase, st).rgb;

	float3 color = float3(0, 0, 0);
	float3 L = normalize(lightOffset);

	float diff = max(0.0, dot(N, L));
	float spec = 0.0;

	if (diff != 0.0)
	{
		float3 E = normalize(viewOffset);
		float3 H = normalize(L + E);
		spec = pow(max(dot(N, H), 0.0), 10);
	}
	color += (diff + spec) * float3(0.6, 0.6, 0.6);
	gl_FragColor = float4(0.5 * L + 0.5, 1.0);
	//gl_FragColor = texture( tex , gl_TexCoord[0].xy ) ;
	gl_FragColor = float4(color, 1.0);
	gl_FragColor = float4(color * baseColor, 1.0);
}

#endif