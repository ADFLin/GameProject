#pragma once
#include "MaterialCommon.sgc"
#include "ViewParam.sgc"

//Material Template
#if !SHADER_COMPILING
#if VERTEX_SHADER
void CalcMaterialOutputVS(inout MaterialOutputVS outputVS, in MaterialParametersVS parameters)
{
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER
void CalcMaterialOutputPS(inout MaterialOutputPS outputPS, in MaterialParametersPS parameters)
{
}
#endif //PIXEL_SHADER
#endif


#if VERTEX_SHADER

MaterialOutputVS InitMaterialOutputVS()
{
	MaterialOutputVS outputVS;
	outputVS.worldOffset = float3(0, 0, 0);
	return outputVS;
}

MaterialOutputVS Material_GetOutputVS(MaterialParametersVS parameters)
{
	MaterialOutputVS outputVS = InitMaterialOutputVS();
	CalcMaterialOutputVS(outputVS, parameters);
	return outputVS;
}

#endif

#if PIXEL_SHADER

MaterialOutputPS InitMaterialOutputPS()
{
	MaterialOutputPS outputPS;
	outputPS.baseColor = float3(0, 0, 0);
	outputPS.normal = float3(0.0, 0.0, 1);
	outputPS.emissiveColor = float3(0, 0, 0);
	outputPS.metallic = 0.0;
	outputPS.specular = 0.0;
	outputPS.roughness = 0.0;
	outputPS.mask = 1.0;
	outputPS.opacity = 0.5;
	outputPS.shadingModel = SHADINGMODEL_DEFAULT_LIT;
	outputPS.depthOffset = 0.0;
	return outputPS;
}

MaterialOutputPS Material_GetOutputPS(MaterialParametersPS parameters)
{
	MaterialOutputPS outputPS = InitMaterialOutputPS();

	CalcMaterialOutputPS(outputPS, parameters);

#if MATERIAL_BLENDING_MASKED
	clip(outputPS.mask - 0.01);
#endif

	return outputPS;
}

float3 Material_GetWorldNormal(in MaterialOutputPS inputPS, inout MaterialParametersPS parameters)
{
#if MATERIAL_USE_WORLD_NORMAL
	return inputPS.normal;
#elif VERTEX_FACTORY_HAVE_TANGENT
	return normalize( mul( parameters.tangentToWorld , inputPS.normal ) );
#else
	return parameters.worldNormal;
#endif
}

float3 Material_CorrectWorldPosByDepthOffset(in MaterialOutputPS inputPS, inout MaterialParametersPS parameters, out float outDepth)
{
	float3 worldPos = parameters.worldPos;
#if MATERIAL_USE_DEPTH_OFFSET
	float4 svPosition = parameters.svPosition;
	if( inputPS.depthOffset != 0 )
	{
		svPosition.z += inputPS.depthOffset;
		float4 NDC = SvPositionToNDC(svPosition);
		float4 worldPosH = mul( View.clipToWorld , NDC );
		worldPos = worldPosH.xyz / worldPosH.w;
	}
	outDepth = NDC.z;
#else
	outDepth = 0;
#endif
	return worldPos;
}

void Material_CalcParametersPS(inout MaterialParametersPS parameters, float4 svPosition, float3 worldPos )
{
	parameters.svPosition = svPosition;
	parameters.worldPos = worldPos;
}

#endif //PIXEL_SHADER