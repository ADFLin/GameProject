#include "ViewParam.sgc"

struct VSOutputParam
{
	float3 color MEMBER_OUT(TEXCOORD0);
	float2 uv    MEMBER_OUT(TEXCOORD1);
};



#if VERTEX_SHADER

uniform float4x4 XForm;

VS_ENTRY_START(MainVS)
	VS_INPUT(float3 InPos , ATTRIBUTE_POSITION)
	VS_INPUT(float3 InColor, ATTRIBUTE_COLOR)
	VS_INPUT(float2 InUV, ATTRIBUTE_TEXCOORD)
	VS_OUTPUT_STRUCT( VSOutputParam VSOutput, 0)
VS_ENTRY_END(MainVS)
{
	//output.svPosition = mul(XForm, float4(inputVS.pos.xy, 0.5, 1));
	float4 worldPos = mul(XForm, float4(InPos.xyz, 1) );
	SvPosition = mul( View.worldToClip , worldPos);
	VSOutput.color = InColor;

	VSOutput.uv = InUV;
}

#endif

#if PIXEL_SHADER

struct ColourBuffer
{
	float red;
	float green;
	float blue;
};

cbuffer ColourBufferBlock
{
	ColourBuffer CBuffer;
};


DEFINE_TEXTURE(Texture2D, Texture);

uniform float3 Color;

PS_ENTRY_START(MainPS)
	PS_INPUT(VSOutputParam OutputVS, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(MainPS)
{
	float3 c = float3(CBuffer.red, CBuffer.green, CBuffer.blue);
	float4 color = TEXTURE_SAMPLE(Texture, OutputVS.uv);
	//OutColor = float4(c * Color * inputVS.color * color.rgb, 1);
	OutColor = float4(OutputVS.color, 1);
}

#endif //#if PIXEL_SHADER