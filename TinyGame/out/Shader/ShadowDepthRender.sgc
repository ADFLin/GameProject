#ifndef SHADOW_DEPTH_ONE_PASS
#define SHADOW_DEPTH_ONE_PASS 0
#endif

#if SHADOW_DEPTH_ONE_PASS
#define VERTEX_FACTORY_USE_GEOMETRY_SHADER 1
#endif

#include "Common.sgc"
#include "MaterialProcess.sgc"
#include "VertexFactoryProcess.sgc"
#include "ShadowCommon.sgc"
#include "LightingCommon.sgc"


#ifndef SHADOW_LIGHT_TYPE
#define SHADOW_LIGHT_TYPE LIGHTTYPE_POINT
#endif
uniform mat4 DepthShadowMatrix;


struct PassInterpolantsParam
{
	float depth;
};

struct VertexOutputParamVSToPS
{
	FactoryInterpolantsParam   factoryInterpolants;
	PassInterpolantsParam      passInterpolants;
};

#if VERTEX_SHADER

layout(location = 0) out VertexOutputParameters OutputVS;
void MainVS()
{
	VertexFactoryIntermediatesVS intermediates = VertexFactory_GetIntermediatesVS();

	MaterialInputVS materialInput = InitMaterialInputVS();
	MaterialParametersVS materialParameters = VertexFactory_GetMaterialParameterVS(intermediates);

	CalcMaterialInputVS(materialInput, materialParameters);

	gl_Position = VertexFactory_GetInterpolants(OutputVS.factoryInterpolants, intermediates, materialInput, materialParameters);
	float4 outPosition = DepthShadowMatrix * float4( VertexFactory_GetWorldPos(OutputVS.factoryInterpolants) , 1 );

#if 0
	float4 viewOffset = View.worldToView * float4(VFOutputVS.worldPos, 1);
#	if SHADOW_LIGHT_TYPE == LIGHTTYPE_POINT
	OutputVS.passInterpolants.depth = (length(viewOffset.xyz) - DepthParam.x) / (DepthParam.y - DepthParam.x);
#	else
	OutputVS.passInterpolants.depth = (-viewOffset.z - DepthParam.x) / (DepthParam.y - DepthParam.x);
#	endif
#else
#	if USE_PERSPECTIVE_DEPTH
	OutputVS.passInterpolants.depth = outPosition.z / outPosition.w;
#	else
	OutputVS.passInterpolants.depth = outPosition.z * ShadowParam.y;
#	endif
#endif
}
#endif //VERTEX_SHADER

#if SHADOW_DEPTH_ONE_PASS

#if GEOMETRY_SHADER
void MainGS()
{
	for( int face = 0; face < 6; ++face )
	{




	}
}

#endif //GEOMETRY_SHADER

#endif //SHADOW_DEPTH_ONE_PASS

#if PIXEL_SHADER

layout(location = 0) in VertexOutputParamVSToPS InputPS;
void MainPS()
{

	MaterialInputPS materialInput = InitMaterialInputPS();
	MaterialParametersPS materialParameters = VertexFactory_GetMaterialParameterPS(InputPS.factoryInterpolants);

	CalcMaterialParameters(materialInput, materialParameters);

	float outDepth = InputPS.passInterpolants.depth;

#if MATERIAL_USE_DEPTH_OFFSET
	float4 NDC = materialParameters.NDC;
	if( materialInput.depthOffset != 0 )
	{
		NDC.z += materialInput.depthOffset;

		float4 worldPos = View.clipToWorld * NDC;
		float4 outPosition = DepthShadowMatrix * float4( worldPos.xyz / worldPos.w , 1);
#if USE_PERSPECTIVE_DEPTH
		outDepth = outPosition.z / outPosition.w;
#else
		outDepth = (outPosition.z / outPosition.w) * ShadowParam.y;
#endif
	}
	WritePixelDepth(NDC.z);

#endif
	//depth = 0.5;
	gl_FragColor = vec4(outDepth, outDepth, outDepth, 1.0);
	//gl_FragColor = float4(shadowPos.xy / shadowPos.w, shadowPos.z / shadowPos.w, 0);
	//gl_FragColor *= float4(materialParameters.worldNormal, 1);
	//gl_FragColor = depth;
}
#endif //PIXEL_SHADER