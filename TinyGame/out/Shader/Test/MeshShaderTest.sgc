#include "Common.sgc"
#include "ViewParam.sgc"

uniform float4x4 LocalToWorld;

#define  NUM_THREAD 32

#ifndef MESH_USE_PACKED_CONE
#define MESH_USE_PACKED_CONE 1
#endif

#ifndef USE_TASK
#define USE_TASK 1
#endif

#ifndef USE_STATS
#define USE_STATS 0
#endif

#ifndef USE_CULL_VIEW
#define USE_CULL_VIEW 1
#endif

#if USE_CULL_VIEW
#if SHADER_COMPILING
layout(std140) cbuffer CullViewBlock
{
	ViewParameters CullView;
};
#else
uniform ViewParameters CullView;
#endif
#else
#define CullView View;
#endif

struct CullData
{
	float4 boundingSphere;
#if MESH_USE_PACKED_CONE
	uint   normalCone;
#else
	float4 normalCone;
#endif

	float  apexOffset;
};


float4 UnpackCone(uint packedValue)
{
	float4 v;
	v.x = float((packedValue >> 0) & 0xFF);
	v.y = float((packedValue >> 8) & 0xFF);
	v.z = float((packedValue >> 16) & 0xFF);
	v.w = float((packedValue >> 24) & 0xFF);

	v = v / 255.0;
	v.xyz = v.xyz * 2.0 - 1.0;

	return v;
}



#if COMPILER_GLSL

layout(std430) buffer CullDataBlock
{
	restrict readonly CullData CullDatas[];
};

#if USE_STATS


layout(binding = 0, offset = 0) uniform atomic_uint RenderMeshletCount;
layout(binding = 0, offset = 4) uniform atomic_uint RenderPrimitiveCount;
layout(binding = 0, offset = 8) uniform atomic_uint OutputVertexCount;


#endif


#endif

#if TASK_SHADER

uniform int4 TaskParams;

bool IsConeDegenerate(CullData c)
{
#if MESH_USE_PACKED_CONE
	return (c.normalCone >> 24) == 0xff;
#else
	return c.normalCone.w >= 1;
#endif
}

bool IsVisible2(CullData c, float4x4 localToWorld, float scale)
{
	//if ((Instance.Flags & CULL_FLAG) == 0)
	//	return true;

	// Do a cull test of the bounding sphere against the view frustum planes.
	float4 center = mul(localToWorld, float4(c.boundingSphere.xyz, 1));
	float radius = c.boundingSphere.w * scale;

	for (int i = 0; i < 6; ++i)
	{
		if (dot(center, CullView.frustumPlanes[i]) > radius)
		{
			return false;
		}
	}

	// Do normal cone culling
	if (IsConeDegenerate(c))
		return true; // Cone is degenerate - spread is wider than a hemisphere.

	// Unpack the normal cone from its 8-bit uint compression
#if MESH_USE_PACKED_CONE
	float4 normalCone = UnpackCone(c.normalCone);
#else
	float4 normalCone = c.normalCone;
#endif

	// Transform axis to world space
	float3 axis = normalize( mul(localToWorld, float4(normalCone.xyz, 0)).xyz );

	// Offset the normal cone axis from the meshlet center-point - make sure to account for world scaling
	float3 apex = center.xyz - axis * c.apexOffset * scale;
	float3 view = normalize(CullView.worldPos - apex);

	// The normal cone w-component stores -cos(angle + 90 deg)
	// This is the min dot product along the inverted axis from which all the meshlet's triangles are backface
	if (dot(view, -axis) > normalCone.w)
	{
		return false;
	}

	// All tests passed - it will merit pixels
	return true;
}

bool IsVisible(uint mi)
{
	//return true;
	CullData cull = CullDatas[mi];
	return IsVisible2(cull, LocalToWorld , 0.15);
}

uint gl_TaskCountNV;
taskNV out TaskParameters
{
	uint   baseID;
	uint8_t   subIDs[NUM_THREAD];
}TaskOutput;
layout(local_size_x = NUM_THREAD) in;
void MainTS()
{
	uint tID = gl_LocalInvocationID.x;
	uint baseID = NUM_THREAD * gl_WorkGroupID.x;
	uint mi = min( baseID + tID, TaskParams.x );

	bool bVisible = (baseID + tID <= TaskParams.x) && IsVisible(mi);

	//bVisible = false;
	uint vote = ballotThreadNV(bVisible);
	uint tasks = bitCount(vote);
	uint voteGroup = vote;
	if (tID == 0)
	{
		gl_TaskCountNV = tasks;
		TaskOutput.baseID = baseID;
#if USE_STATS
		atomicCounterAdd(RenderMeshletCount, tasks);
#endif
	}
	

	uint idxOffset = bitCount(vote & gl_ThreadLtMaskNV);
	if (bVisible) 
	{
		TaskOutput.subIDs[idxOffset] = uint8_t(tID);

	}
}
#endif



#if MESH_SHADER

#ifndef MAX_VERTEX_COUNT
#define  MAX_VERTEX_COUNT 64
#endif
#ifndef MAX_PRIMITIVE_COUNT
#define  MAX_PRIMITIVE_COUNT 126
#endif

#if USE_TASK
taskNV in TaskParameters
{
	uint     baseID;
	uint8_t  subIDs[NUM_THREAD];
}TaskOutput;
#endif


struct MeshletData
{
	uint vertexCount;
	uint vertexOffset;
	uint primitiveCount;
	uint primitveOffset;
};

layout(std430) buffer MeshletDataBlock
{
	restrict readonly MeshletData Meshlets[];
};

layout(std430) buffer PrimitiveIndicesBlock
{
	restrict readonly uint PrimitiveIndices[];
};

layout(std430) buffer VertexIndicesBlock
{
	restrict readonly uint VertexIndices[];
};

struct MeshVertexData
{
	float3 pos;
	float3 normal;
	float4 tangent;
};


layout(std430) buffer MeshVertexDataBlock
{
	restrict readonly float MeshVertices[];
};


MeshVertexData GetVerexData(uint index)
{
	uint offset = index * 10;
	MeshVertexData data;
	data.pos = float3(Vertices[offset + 0], Vertices[offset + 1], Vertices[offset + 2]);
	data.normal = float3(Vertices[offset + 3], Vertices[offset + 4], Vertices[offset + 5]);
	data.tangent = float4(Vertices[offset + 6], Vertices[offset + 7], Vertices[offset + 8], Vertices[offset + 9]);
	//data.tangent = float4(0, 0, 0, 0);
	return data;
}

out gl_MeshPerVertexNV{
	vec4 gl_Position;
} gl_MeshVerticesNV[];

out uint gl_PrimitiveCountNV;
out uint gl_PrimitiveIndicesNV[];

// If we don't redeclare gl_PerVertex, compilation fails with the following error:
// error C7592: ARB_separate_shader_objects requires built-in block gl_PerVertex to be redeclared before accessing its members
out gl_PerVertex
{
	vec4 gl_Position;
} gl_Why;


layout(local_size_x = NUM_THREAD) in;
layout(max_vertices = MAX_VERTEX_COUNT, max_primitives = MAX_PRIMITIVE_COUNT) out;
layout(triangles) out;
layout(location = 0) out MSOutputParameters
{
	float3 color;
	float2 UV;
} MSOutput[];

uint hash(uint a)
{
	a = (a + 0x7ed55d16) + (a << 12);
	a = (a ^ 0xc761c23c) ^ (a >> 19);
	a = (a + 0x165667b1) + (a << 5);
	a = (a + 0xd3a2646c) ^ (a << 9);
	a = (a + 0xfd7046c5) + (a << 3);
	a = (a ^ 0xb55a4f09) ^ (a >> 16);
	return a;
}
void MainMS()
{
#if USE_TASK
	uint mi = TaskOutput.baseID + TaskOutput.subIDs[gl_WorkGroupID.x];
#else
	uint mi = gl_WorkGroupID.x;
#endif
	uint tID = gl_LocalInvocationID.x;

	MeshletData meshlet = Meshlets[mi];
	uint mhash = hash(mi);
	vec3 mcolor = vec3(float(mhash & 255), float((mhash >> 8) & 255), float((mhash >> 16) & 255)) / 255.0;
#if NUM_THREAD == 1
	for (uint i = 0; i < meshlet.vertexCount; ++i)
	{
		uint index = VertexIndices[meshlet.vertexOffset + i];

		MeshVertexData vertex = GetVerexData(index);
		float4 worldPos = LocalToWorld * float4(vertex.pos, 1);
		gl_MeshVerticesNV[i].gl_Position = View.worldToClip * worldPos;
		MSOutput[i].color = mcolor;
		MSOutput[i].UV = vertex.pos.xy;
	}

	for (uint i = 0; i < meshlet.primitiveCount; ++i)
	{
		uint index = PrimitiveIndices[meshlet.primitveOffset + i];

		gl_PrimitiveIndicesNV[3 * i + 0] = (index & 0x3ff);
		gl_PrimitiveIndicesNV[3 * i + 1] = ((index >> 10) & 0x3ff);
		gl_PrimitiveIndicesNV[3 * i + 2] = ((index >> 20) & 0x3ff);
	}

	gl_PrimitiveCountNV = meshlet.primitiveCount;

#else
	CullData cull = CullDatas[mi];
#if MESH_USE_PACKED_CONE
	float4 normalCone = UnpackCone(cull.normalCone);
#else
	float4 normalCone = cull.normalCone;
#endif

	const uint vertexCountThread = (MAX_VERTEX_COUNT + ( NUM_THREAD - 1 ) )/ NUM_THREAD;
	for( int i = 0 ; i < vertexCountThread; ++i )
	{
		uint index =  min( vertexCountThread * tID + i, meshlet.vertexCount - 1);
		uint vertexIndex = VertexIndices[meshlet.vertexOffset + index];
		MeshVertexData vertex = GetVerexData(vertexIndex);
		float4 worldPos = LocalToWorld * float4(vertex.pos, 1);
		gl_MeshVerticesNV[index].gl_Position = View.worldToClip * worldPos;

		MSOutput[index].color = 0.5 * vertex.normal + 0.5;//normalCone.xyz;
		MSOutput[index].UV = vertex.pos.xy;
	}

	const uint primitiveCountThread = (MAX_PRIMITIVE_COUNT + (NUM_THREAD - 1)) / NUM_THREAD;
	for (int i = 0; i < primitiveCountThread; ++i)
	{
		uint index =  min(primitiveCountThread * tID + i, meshlet.primitiveCount - 1);
		uint packedIndex = PrimitiveIndices[meshlet.primitveOffset + index];

		gl_PrimitiveIndicesNV[3 * index + 0] = (packedIndex & 0x3ff);
		gl_PrimitiveIndicesNV[3 * index + 1] = ((packedIndex >> 10) & 0x3ff);
		gl_PrimitiveIndicesNV[3 * index + 2] = ((packedIndex >> 20) & 0x3ff);
	}


	if (tID == 0)
	{
		gl_PrimitiveCountNV = meshlet.primitiveCount;
#if USE_STATS
		atomicCounterAdd(RenderPrimitiveCount, meshlet.primitiveCount);
		atomicCounterAdd(OutputVertexCount, meshlet.vertexCount);
#endif
	}
#endif


}

#endif

#if VERTEX_SHADER

VS_ENTRY_START(MainVS)
	VS_INPUT(float3 InPos, ATTRIBUTE_POSITION)
	VS_INPUT(float3 InNormal, ATTRIBUTE_NORMAL)
	VS_INPUT(float4 InTangent, ATTRIBUTE_TANGENT)
	VS_OUTPUT(float3 OutColor, 0)
	VS_OUTPUT(float2 OutUV, 1)
VS_ENTRY_END(MainVS)
{
	float4 worldPos = mul( LocalToWorld , float4(InPos, 1));
	SvPosition = mul( View.worldToClip , worldPos );
	OutColor = 0.5 * InNormal + 0.5;
	OutUV = InPos.xy;
}
#endif

#if PIXEL_SHADER

DEFINE_TEXTURE(Texture2D, Texture);

PS_ENTRY_START(MainPS)
	PS_INPUT(float3 InColor, 0)
	PS_INPUT(float2 InUV, 1)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(MainPS)
{
	float3 tex = TEXTURE_SAMPLE(Texture, InUV).rgb;
	OutColor = float4(tex * InColor, 1.0);
}

#endif