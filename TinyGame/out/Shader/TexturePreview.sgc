#include "Common.sgc"
#include "CubeMapCommon.sgc"

#define TEX_PREVIEW_1D   0
#define TEX_PREVIEW_2D   1
#define TEX_PREVIEW_3D   2
#define TEX_PREVIEW_CUBE 3
#define TEX_PREVIEW_CUBE_PROJECTION 4

#ifndef TEX_PREVIEW
#define TEX_PREVIEW TEX_PREVIEW_2D
#endif

#ifndef USE_COLOR_MASK
#define USE_COLOR_MASK 0
#endif

#ifndef USE_MAPPING_PARAMS
#define USE_MAPPING_PARAMS 0
#endif

#if TEX_PREVIEW == TEX_PREVIEW_1D
#define UVType float2
#define TextureType Texture1D
#elif TEX_PREVIEW == TEX_PREVIEW_2D
#define UVType float2
#define TextureType Texture2D
#elif TEX_PREVIEW == TEX_PREVIEW_3D
#define UVType float3
#define TextureType Texture3D
#elif TEX_PREVIEW == TEX_PREVIEW_CUBE
#define UVType float3
#define TextureType TextureCube
#elif TEX_PREVIEW == TEX_PREVIEW_CUBE_PROJECTION
#define UVType float2
#define TextureType TextureCube
#endif

struct VSOutputParameters
{
	UVType UVs MEMBER_OUT(TEXCOORD0);
};

#if VERTEX_SHADER

uniform float4x4 XForm;
VS_ENTRY_START(MainVS)
	VS_INPUT(float2 InPosition , ATTRIBUTE_POSITION)
	VS_INPUT(UVType InUV, ATTRIBUTE_TEXCOORD)
	VS_OUTPUT_STRUCT(VSOutputParameters VSOutput, 0)
VS_ENTRY_END(MainVS)
{
	VSOutput.UVs = InUV;
	SvPosition = mul( XForm , float4( InPosition , 0 , 1 ));
}

#endif

#if PIXEL_SHADER

uniform float4 ColorMask;
uniform float3 MappingParams;


DEFINE_TEXTURE(TextureType, Texture);
uniform float PreviewLevel;

PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput , 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(MainPS)
{
#if TEX_PREVIEW == TEX_PREVIEW_CUBE_PROJECTION
	float4 color = TEXTURE_SAMPLE_LEVEL(Texture, EquirectangularToDir(VSOutput.UVs), PreviewLevel);
#elif TEX_PREVIEW == TEX_PREVIEW_1D
	float4 color = TEXTURE_SAMPLE_LEVEL(Texture, VSOutput.UVs.x, PreviewLevel);
#else
	float4 color = TEXTURE_SAMPLE_LEVEL(Texture, VSOutput.UVs, PreviewLevel);
#endif

#if USE_MAPPING_PARAMS
	color.rgb = pow(MappingParams.x * color.rgb + MappingParams.y, MappingParams.zzz);
#endif

#if USE_COLOR_MASK
	if (ColorMask.a == 0)
	{
		color = float4(color.rgb * ColorMask.rgb, 1.0);
	}
	else
	{
		color = color * ColorMask;
	}
#if COMPILER_GLSL
	uint4 MaskBits;
	MaskBits.r = ColorMask.r > 0.0 ? 1 : 0;
	MaskBits.g = ColorMask.g > 0.0 ? 1 : 0;
	MaskBits.b = ColorMask.b > 0.0 ? 1 : 0;
	MaskBits.a = ColorMask.a > 0.0 ? 1 : 0;
#else
	uint4 MaskBits = (ColorMask > float4(0.0));
#endif
	uint coutMask = MaskBits.r + MaskBits.g + MaskBits.b + MaskBits.a;
	if (coutMask == 1)
	{
		if (MaskBits.r != 0)
			color = float4(color.rrr, 1);
		if (MaskBits.g != 0)
			color = float4(color.ggg, 1);
		if (MaskBits.b != 0)
			color = float4(color.bbb, 1);
		if (MaskBits.a != 0)
			color = float4(color.aaa, 1);
	}
#endif
	//color.rgb = pow(color.rgb, 0.2);
	//OutColor = float4(VSOutput.UVs, 0, 1);
	OutColor = color;
}

#endif