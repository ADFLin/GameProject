#include "Common.sgc"
#include "ScreenVertexShader.sgc"
#include "LightingCommon.sgc"
#include "CubeMapCommon.sgc"

#define  USE_CUBE_TEXTURE 0

#if PIXEL_SHADER

uniform float3 FaceDir;
uniform float3 FaceUpDir;

DEFINE_TEXTURE( Texture2D , Texture );
DEFINE_TEXTURE( TextureCube, CubeTexture );

float3x3 TangentToWorldTransform(float3 tangentZ)
{
#if 1
	float3 up = abs(tangentZ.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
	float3 tangentX = normalize(cross(up, tangentZ));
	float3 tangentY = cross(tangentZ, tangentX);
#else
	const float Sign = tangentZ.z >= 0 ? 1 : -1;
	const float a = -rcp(Sign + tangentZ.z);
	const float b = tangentZ.x * tangentZ.y * a;

	float3 tangentX = { 1 + Sign * a * Square(tangentZ.x), Sign * b, -Sign * tangentZ.x };
	float3 tangentY = { b,  Sign + a * Square(tangentZ.y), -tangentZ.y };	
#endif

#if COMPILER_HLSL
	return transpose( float3x3(tangentX, tangentY, tangentZ) );
#else
	return float3x3(tangentX, tangentY, tangentZ);
#endif
}

float3 GetEnvRadiance(float3 dir)
{
#if USE_CUBE_TEXTURE
	return TEXTURE_SAMPLE(CubeTexture, dir).rgb;
#else
	return TEXTURE_SAMPLE(Texture, EquirectangularCoord(dir)).rgb;
#endif
}

float3 GetFaceCameraDir(float2 faceUV)
{
	float2 NDC = 2 * faceUV - 1;
	float3 faceRightDir = normalize( cross(FaceDir, FaceUpDir) );
	return normalize(FaceDir + NDC.x * faceRightDir + NDC.y * FaceUpDir);
}

#if SHADER_ENTRY(EquirectangularToCubePS)

PS_ENTRY_START(EquirectangularToCubePS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(EquirectangularToCubePS)
{
	float3 dir = GetFaceCameraDir(VSOutput.UVs);
	float3 color = TEXTURE_SAMPLE(Texture, EquirectangularCoord(dir)).rgb;
	OutColor = float4(color, 1);
}
#endif

#if  SHADER_ENTRY(IrradianceGenPS)

uniform int2 IrrianceSampleCount = int2(256 * 2, 200 * 2);

PS_ENTRY_START(IrradianceGenPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(IrradianceGenPS)
{
	float3 N = GetFaceCameraDir(VSOutput.UVs);

	float3x3 tangentToWorld = TangentToWorldTransform(N);

	float dPhi = (2.0 * PI) / float(IrrianceSampleCount.x);
	float dTheta = (0.5 * PI) / float(IrrianceSampleCount.y);
	float3 irradiance = float3(0, 0, 0);
#if 1
	for( int m = 0; m < IrrianceSampleCount.x; ++m )
	{
		float2 csPhi;
		sincos(float(m) * dPhi, csPhi.y, csPhi.x);
		for( int n = 0; n < IrrianceSampleCount.y; ++n )
		{
			float2 csTheta;
			sincos(float(n) * dTheta, csTheta.y, csTheta.x);

			float3 L = normalize(mul(float3(csTheta.y * csPhi, csTheta.x), tangentToWorld));
			irradiance += csTheta.x * csTheta.y * GetEnvRadiance(L);
		}
	}
#else

	for( float phi = 0; phi <  2.0 * PI; phi += dPhi )
	{
		float2 csPhi;
		sincos(phi, csPhi.y, csPhi.x);
		for( float theta = 0; theta < 0.5 * PI; theta += dTheta )
		{
			float2 csTheta;
			sincos(theta, csTheta.y, csTheta.x);
			float3 L = normalize( mul(tangentToWorld , float3(csTheta.y * csPhi, csTheta.x)));
			irradiance += csTheta.x * csTheta.y * GetEnvRadiance(L);
		}
	}
#endif

	irradiance *= PI / float(IrrianceSampleCount.x * IrrianceSampleCount.y);
	OutColor = float4(irradiance, 1);

}
#endif


uint ReverseBits32(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return bits;
}

float RadicalInverse_VdC(uint bits)
{
	return float( ReverseBits32(bits) ) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
	return float2(float(i) / float(N), RadicalInverse_VdC(i));
}


float4 ImportanceSampleGGX(float2 E,float a2)
{
	float phi = 2.0 * PI * E.x;
#if 0
	float cosTheta = sqrt( (1.0 - E.y) / (1.0 + (a2 - 1.0) * E.y) );
	float sinTheta = sqrt( 1.0 - cosTheta*cosTheta );
#else
	float cosTheta = sqrt((1.0 - E.y) / (1.0 + (a2 - 1.0) * E.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
#endif

	// from spherical coordinates to cartesian coordinates
	float3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	float d = (cosTheta * a2 - cosTheta) * cosTheta + 1;
	float D = a2 / (PI*d*d);
	float PDF = D * cosTheta;
	return float4(H , PDF);
}


#if SHADER_ENTRY(PrefilteredGenPS)

uniform float Roughness;
uniform int PrefilterSampleCount = 2048 * 2;

PS_ENTRY_START(PrefilteredGenPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(PrefilteredGenPS)
{

	float3 N = GetFaceCameraDir(VSOutput.UVs);
	float3 R = N;
	float3 V = R;

	float3x3 tangentToWorld = TangentToWorldTransform(N);

	float totalWeight = 0.0;
	float3 prefilteredColor = float3(0.0,0.0,0.0);
	for( uint i = 0u; i < PrefilterSampleCount; ++i )
	{
		float2 E = Hammersley(i, PrefilterSampleCount);
		float3 H = ImportanceSampleGGX(E, Pow4(Roughness)).xyz;
		H = normalize( mul(tangentToWorld , H ) );
		float3 L = normalize(2.0 * dot(V, H) * H - V);

		float NoL = saturate(dot(N, L));
		if( NoL > 0.0 )
		{
			prefilteredColor += GetEnvRadiance(L).rgb * NoL;
			totalWeight += NoL;
		}
	}
	prefilteredColor = prefilteredColor / totalWeight;

	OutColor = float4(prefilteredColor, 1.0);
}

#endif //SHADER_ENTRY(PrefilteredGenPS)

uniform int BRDFSampleCount;
float2 IntegrateBRDF(float NoV, float roughness)
{
	float3 V;
	V.x = sqrt(1.0 - NoV*NoV);
	V.y = 0.0;
	V.z = NoV;

	float A = 0.0;
	float B = 0.0;
	LOOP
	for (uint i = 0u; i < BRDFSampleCount; ++i)
	{
		float2 E = Hammersley(i, BRDFSampleCount);
		float3 H = ImportanceSampleGGX(E, Pow4(roughness)).xyz;
		float3 L = (2.0 * dot(V, H) * H) - V;

		float NoL = saturate(L.z);
		float NoH = saturate(H.z);
		float VoH = saturate(dot(V, H));

		if (NoL > 0.0)
		{
#if 1
			float G = Vis_SmithIBL(roughness, NoV, NoL);
			float G_Vis = (G * VoH) / (NoH * NoV);
			float Fc = pow(1.0 - VoH, 5.0);

			A += (1.0 - Fc) * G_Vis;
			B += Fc * G_Vis;
#else
			float a = Square(roughness);
			float a2 = a * a;
			float Vis = Vis_SmithJointApprox(a2, NoV, NoL);
			float Vis_SmithV = NoL * sqrt(NoV * (NoV - NoV * a2) + a2);
			float Vis_SmithL = NoV * sqrt(NoL * (NoL - NoL * a2) + a2);
			//float Vis = 0.5 * rcp( Vis_SmithV + Vis_SmithL );

			// Incident light = NoL
			// pdf = D * NoH / (4 * VoH)
			// NoL * Vis / pdf
			float NoL_Vis_PDF = NoL * Vis * (4 * VoH / NoH);

			float Fc = pow(1 - VoH, 5);
			A += (1 - Fc) * NoL_Vis_PDF;
			B += Fc * NoL_Vis_PDF;
#endif
		}
	}

	return float2(A, B) / BRDFSampleCount;
}

#if SHADER_ENTRY(PreIntegrateBRDFGenPS)

PS_ENTRY_START(PreIntegrateBRDFGenPS)
	PS_INPUT_STRUCT(VSOutputParameters VSOutput, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(PreIntegrateBRDFGenPS)
{
	float2 integratedBRDF = IntegrateBRDF( VSOutput.UVs.x , VSOutput.UVs.y );
	OutColor = float4( integratedBRDF , 0 , 1 );
}

#endif //SHADER_ENTRY(PreIntegrateBRDFGenPS)


#endif //PIXEL_SHADER