
#include "Common.sgc"
#include "ViewParam.sgc"

#if USE_MATERIAL
#include "MaterialProcess.sgc"
#include "VertexFactoryProcess.sgc"

struct PassInterpolantsParam
{
	float dump;
};

struct VertexOutputParamVSToPS
{
	FactoryInterpolantsParam   factoryInterpolants;
	PassInterpolantsParam      passInterpolants;
};
#else

struct OutputVSParam
{
	float4 pos;
	float4 color;
	float4 viewPos;
};

#endif

#if VERTEX_SHADER

#if USE_MATERIAL

layout(location = 0) out VertexOutputParameters OutputVS;
#else //USE_MATERIAL

out OutputVSParam OutputVS;
uniform float4 BaseColor;
uniform float4x4 WorldTransform;
layout(location = ATTRIBUTE_POSITION) in float3 InPosition;
layout(location = ATTRIBUTE_NORMAL) in float3 InNoraml;

#endif //USE_MATERIAL

void BassPassVS()
{

#if USE_MATERIAL
	VertexFactoryIntermediatesVS intermediates = VertexFactory_GetIntermediatesVS();

	MaterialOutputVS materialInput = InitMaterialOutputVS();
	MaterialParametersVS materialParameters = VertexFactory_GetMaterialParameterVS(intermediates);

	CalcMaterialOutputVS(materialInput, materialParameters);

	gl_Position = VertexFactory_GetInterpolants(OutputVS.factoryInterpolants, intermediates, materialInput, materialParameters);

#else //USE_MATERIAL
	float4 worldPos = WorldTransform * float4(InPosition, 1.0);
	OutputVS.pos = View.worldToClip * worldPos;
	OutputVS.color = float4(clamp(InPosition / 10 , 0, 1), 0.2);
	float3 normal = mat3(WorldTransform) * InNoraml;
	OutputVS.color *= float4( 0.5 * normal + 0.5 , 1.0);
	OutputVS.viewPos = View.worldToView * worldPos;
	gl_Position = View.worldToClip * worldPos;
#endif // USE_MATERIAL
}

layout(location = 0) in float4 InScreenPos;
void ScreenVS()
{
	gl_Position = InScreenPos;
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

#include "OITCommon.sgc"

#if USE_MATERIAL
layout(location = 0) in VertexOutputParamVSToPS InputPS;
#else //USE_MATERIAL
in OutputVSParam OutputVS;
#endif //USE_MATERIAL

PS_EARLY_DEPTH_TEST
void BassPassPS()
{
#if USE_MATERIAL
	MaterialParametersPS materialParameters = VertexFactory_GetMaterialParameterPS(InputPS.factoryInterpolants);


	MaterialOutputPS materialOutput = InitMaterialOutputPS();
	Material_CalcParametersPS(materialOutput, materialParameters);

	float3 pixelColor = materialOutput.baseColor;
	float  pixelAlpha = materialOutput.opacity;
	pixelAlpha = 0.4;
	//float  pixelDepth = materialParameters.screenPos.z;
	float  pixelDepth = (View.worldToView * float4(materialParameters.worldPos, 1)).z;
#else //USE_MATERIAL
	float3 pixelColor = OutputVS.color.rgb;
	float  pixelAlpha = OutputVS.color.a;
	float  pixelDepth = 0.5 * OutputVS.pos.z + 0.5;

#endif //USE_MATERIAL
	OITProcessPS(float4(pixelColor, pixelAlpha), pixelDepth);
}

layout(location = 0) out float4 OutColor;
layout(location = 1) out int2 OutValue;
void ClearStoragePS()
{
	OutColor = float4(1, 0, 0, 0);
	OutValue = int2(-1, 0);
}

#endif //PIXEL_SHADER

#if COMPUTE_SHADER

#if COMPILER_HLSL
RWBuffer<int> CounterBuffer;
#else
layout(std430) buffer CounterBuffer
{
	int Counter;
};
#endif

CS_NUM_THREADS(1, 1, 1)
CS_ENTRY(ResetCounterCS)
{
#if COMPILER_HLSL
	CounterBuffer[0] = 0;
#else
	Counter = 0;
#endif
}

#endif //COMPUTE_SHADER




