#define MATERIAL_TEXCOORD_NUM 1
#define MATERIAL_BLENDING_MASKED 0
#include "MaterialCommon.sgc"
#include "ViewParam.sgc"

uniform sampler2D TextureD;
uniform sampler2D TextureS;


#if VERTEX_SHADER

void  CalcMaterialInputVS(inout MaterialInputVS inputVS, inout MaterialParametersVS parameters)
{
	inputVS.worldOffset = float3(0, 0, 0);
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

void CalcMaterialInputPS(inout MaterialInputPS inputPS, inout MaterialParametersPS parameters)
{
	float c = cos( 0.001 * parameters.worldPos.x );
	float3 n = normalize( float3(-c, 0, 1) );
	float3 t = normalize( float3(1, 0, c) );

	float3 baseColor = texture2D(TextureD, float2(parameters.texCoords[0].x, 1 - parameters.texCoords[0].y)).rgb;

	inputPS.baseColor = baseColor;
	//inputPS.emissiveColor = 0.2 * baseColor;
	//inputPS.baseColor = float3(parameters.texCoords[0].x, parameters.texCoords[0].y, 1);
	inputPS.metallic = 0.9;
	inputPS.roughness = 0.7;
	inputPS.specular = 0.2;
	//float2 value = 2 * frac(10 * (parameters.worldPos.x + parameters.worldPos.y + parameters.worldPos.z )) - 1;
	float2 value = 2 * frac(10 * (parameters.worldPos.xy)) - 1;
	//inputPS.mask = value.x * value.y > 0 ? 1 : 0;
	//inputPS.normal = float3(0,0,1);
}

#endif //PIXEL_SHADER