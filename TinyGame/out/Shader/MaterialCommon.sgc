#pragma once
#include "Common.sgc"

#ifndef MATERIAL_TEXCOORD_NUM
#define MATERIAL_TEXCOORD_NUM 0
#endif

#ifndef MATERIAL_BLENDING_MASKED
#define MATERIAL_BLENDING_MASKED 0
#endif

#ifndef MATERIAL_USE_DEPTH_OFFSET
#define MATERIAL_USE_DEPTH_OFFSET 0
#endif

#ifndef MATERIAL_USE_WORLD_NORMAL
#define MATERIAL_USE_WORLD_NORMAL 0
#endif

#define SHADINGMODEL_UNLIT        1
#define SHADINGMODEL_DEFAULT_LIT  2

#if VERTEX_SHADER



struct MaterialParametersVS
{
	float4 vertexPos;
	float3 worldPos;
	float4 vectexColor;
	float3 noraml;
#if MATERIAL_TEXCOORD_NUM
	float2 texCoords[MATERIAL_TEXCOORD_NUM];
#endif
};

struct MaterialOutputVS
{
	float3 worldOffset;
};

#endif //VERTEX_SHADER

#if PIXEL_SHADER


struct MaterialParametersPS
{
	float3 worldPos;
	float4 svPosition;

	float4 vectexColor;
	float3 worldNormal;
	mat3   tangentToWorld;
#if MATERIAL_TEXCOORD_NUM
	float2 texCoords[MATERIAL_TEXCOORD_NUM];
#endif
};


struct MaterialOutputPS
{
	float3 baseColor;
	float3 normal;
	float3 emissiveColor;
	float  metallic;
	float  specular;
	float  roughness;
	float  mask;
	float  opacity;
	float  depthOffset;
	uint   shadingModel;
};

#if USE_TESSELLATION
struct MaterialInputDS
{
	float3 worldDispOffset;
};

#endif

float3 GetTextureNormal(float4 value)
{
	return 2 * value.xyz - 1;
}

#endif //PIXEL_SHADER



