#pragma once

#include "Common.sgc"

uniform sampler2D GBufferTextureA;
uniform sampler2D GBufferTextureB;
uniform sampler2D GBufferTextureC;
uniform sampler2D GBufferTextureD;

struct GBufferData
{
	float3 worldPos;
	float3 normal;
	float3 baseColor;

	float metallic;
	float specular;
	float roughness;
	uint  shadingModel;
	
	float3 diffuseColor;
	float  sceneDepth;
	float3 specularColor;
};


float3 GetGBufferNormal(float2 UVs)
{
	return texture2D(GBufferTextureB, UVs).xyz;
}

uint DecodeShadingModel(float value)
{
	return (uint(round(value * float(0xff)))) & 0xff;
}

float EncodeShadingModel(uint value)
{
	return float(value) / float(0xff);
}

void EncodeGBuffer(in GBufferData GBuffer ,
				   out float4 GBufferA,
				   out float4 GBufferB,
				   out float4 GBufferC,
				   out float4 GBufferD)
{
	GBufferA = float4(GBuffer.worldPos, GBuffer.sceneDepth);
	GBufferB = float4(GBuffer.normal, GBuffer.sceneDepth);
	GBufferC = float4(GBuffer.baseColor, GBuffer.sceneDepth);

	GBufferD.r = GBuffer.metallic;
	GBufferD.g = GBuffer.roughness;
	GBufferD.b = GBuffer.specular;
	GBufferD.a = EncodeShadingModel(GBuffer.shadingModel);
}

GBufferData DecodeGBuffer(in float4 GBufferA, in float4 GBufferB, in float4 GBufferC , in float4 GBufferD )
{
	GBufferData GBuffer;
	GBuffer.worldPos = GBufferA.rgb;
	GBuffer.sceneDepth = GBufferC.a;
	GBuffer.normal = GBufferB.rgb;
	GBuffer.baseColor = GBufferC.rgb;

	GBuffer.metallic = GBufferD.r;
	GBuffer.roughness = GBufferD.g;
	GBuffer.specular = GBufferD.b;
	GBuffer.shadingModel = DecodeShadingModel(GBufferD.a);
	GBuffer.specularColor = lerp( float3(0.08 *GBuffer.specular) , GBuffer.baseColor, GBuffer.metallic);
	GBuffer.diffuseColor = GBuffer.baseColor - GBuffer.baseColor * GBuffer.metallic;

	return GBuffer;
}

GBufferData GetGBufferData( in float2 UVs )
{
	GBufferData data = DecodeGBuffer(
		texture2D(GBufferTextureA, UVs),
		texture2D(GBufferTextureB, UVs),
		texture2D(GBufferTextureC, UVs),
		texture2D(GBufferTextureD, UVs));

	return data;
}