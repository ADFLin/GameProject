#include "Common.sgc"

#pragma optionNV(fastmath off)
#pragma optionNV(fastprecision off)

#define USE_DOUBLE_SIM 0

#if USE_DOUBLE_SIM
#include "DoubleSim.sgc"
#define ScalarType  float2
#define ComplexType float4
#else
#include "ComplexCommon.sgc"
#define ScalarType  float
#define ComplexType float2
void StoreValue(out float outValue, float s)
{
	outValue = s;
}
void StoreValue(out float2 outValue, float2 s)
{
	outValue = s;
}
float Compare(float a, float b)
{
	if (a < b)
	{
		return -1.;
	}
	if (a > b)
	{
		return 1.;
	}
	return 0.;
}
#endif


#if COMPUTE_SHADER

cbuffer MParamsBlock
{
uniform float4 CoordParam;  //xy = center pos , zw = min pos ;
uniform float4 CoordParam2; //xy = dx dy , zw = rect rotation cos sin;
uniform float4 ColorMapParam; // x = density , y = color rotation , bailoutSquare;
uniform int   MaxIteration;
uniform int2  ViewSize;
}

#if COMPILER_HLSL
RWTexture2D< float4 > ColorRWTexture;
#else
layout(rgba32f) uniform writeonly image2D  ColorRWTexture;
//layout(r32ui) uniform writeonly uimage2D IteratorRWTexture;
#endif
DEFINE_TEXTURE( Texture1D , ColorMapTexture );

#ifndef SIZE_X
#define SIZE_X 8
#endif
#ifndef SIZE_Y
#define SIZE_Y 8
#endif

#if USE_DOUBLE_SIM
ComplexType Rotate(ScalarType c, ScalarType s, ComplexType v)
{
	float4 result;
	result.xy = DSAdd(DSMul(c, v.xy), DSMul(s, v.zw));
	result.zw = DSSub(DSMul(c, v.zw), DSMul(s, v.xy));
	return result;
}
#endif

float2 Rotate(float c, float s, float2 v)
{
	return float2(c * v.x + s * v.y, -s * v.x + c * v.y);
}

CS_NUM_THREADS(SIZE_X, SIZE_Y, 1)
CS_ENTRY(MainCS)
{
	int2 pixelPos = int2(SvDispatchThreadID.xy);
	if (pixelPos.x >= ViewSize.x || pixelPos.y >= ViewSize.y)
		return;

	//float2 pos = CoordParam.zw + float2(pixelPos) * CoordParam2.xy;
	//float2 z0 = center + Rotate(rc, rs, ComplexSub(pos, center));
#if 1
	ComplexType pos;
	StoreValue(pos, CoordParam.zw);
	ComplexType delta;
	StoreValue(delta, float2(pixelPos));
#if USE_DOUBLE_SIM
	ScalarType sx;
	StoreValue(sx, CoordParam2.x);
	ScalarType sy;
	StoreValue(sy, CoordParam2.y);
	delta.xy = DSMul(delta.xy, sx);
	delta.zw = DSMul(delta.zw, sy);
#else
	delta *= CoordParam2.xy;
#endif
	pos = ComplexAdd(pos, delta);


	ComplexType center;
	StoreValue(center, CoordParam.xy);
	ScalarType rc;
	StoreValue(rc, CoordParam2.z);
	ScalarType rs;
	StoreValue(rs, CoordParam2.w);
	ComplexType z0 = center;
	z0 = ComplexAdd(z0, Rotate(rc, rs, ComplexSub(pos, center)));
#else
	float2 pos = CoordParam.zw + float2(pixelPos) * CoordParam2.xy;
	float2 z0f = CoordParam.xy + Rotate(CoordParam2.z, CoordParam2.w, pos - CoordParam.xy);
	ComplexType z0;
	StoreValue(z0, z0f);
#endif

	ScalarType threshold;
	StoreValue(threshold, ColorMapParam.z);

	ComplexType z = z0;
	int iteration = 0;

	LOOP
	for(; iteration < MaxIteration ; ++iteration )
	{
		z = ComplexAdd(ComplexMul(z, z) , z0);
		ScalarType rSquare = ComplexAbsSquare(z);
		if ( Compare(rSquare, threshold) > 0)
			break;
	}

	//imageStore(IteratorRWTexture, pixelPos, uint4(iteration));
	float3 color = (iteration == MaxIteration) ? float3(0,0,0) : TEXTURE_SAMPLE(ColorMapTexture, float(iteration) / float(MaxIteration) * ColorMapParam.x * 50 + ColorMapParam.y).rgb;


	float d = float(iteration) / float(MaxIteration);
#if COMPILER_HLSL
	ColorRWTexture[pixelPos] = float4(color, 1);
	//ColorRWTexture[pixelPos] = float4(Test, 1);
#else
	imageStore(ColorRWTexture, pixelPos, float4( color , 1 ) );
	//imageStore(ColorRWTexture, pixelPos, float4( float(iteration) / float(100) ));
	//imageStore(ColorRWTexture, pixelPos, float4(float(100) / float(100)));
#endif


}

#endif