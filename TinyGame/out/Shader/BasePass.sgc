#include "VertexFactoryProcess.sgc"
#include "MaterialProcess.sgc"

#include "DeferredShadingCommon.sgc"
#include "ViewParam.sgc"

#ifndef FORWARD_SHADING
#define FORWARD_SHADING 0
#endif //FORWARD_SHADING

#define PASS_HAVE_INTERPOLANTS 0

struct VertexOutputParamVSToPS
{
	FactoryInterpolantsParam   factoryInterpolants;
};

#if VERTEX_SHADER

VS_ENTRY_START(BassPassVS)
	VS_INPUT_PARAMETERS(VertexFactoryInputParameters VertexInput)
	VS_OUTPUT_STRUCT(VertexOutputParameters OutputVS, 0)
VS_ENTRY_END(BassPassVS)
{
	VertexFactoryIntermediatesVS intermediates = VertexFactory_GetIntermediatesVS(VERTEX_INPUT_PARAM(VertexInput));

	float4 worldPosExcludingWPO = VertexFactory_GetWorldPosition(VERTEX_INPUT_PARAM_COMMA(VertexInput) intermediates);

	float4 worldPos = worldPosExcludingWPO;
	MaterialParametersVS materialParameters = VertexFactory_GetMaterialParameterVS(VERTEX_INPUT_PARAM_COMMA(VertexInput) intermediates, worldPos);

	MaterialOutputVS materialOutput = Material_GetOutputVS( materialParameters );

	worldPos.xyz += materialOutput.worldOffset;

	float4 clipPos = mul(View.worldToClip, worldPos);
	SvPosition = clipPos;
	OutputVS.factoryInterpolants = VertexFactory_GetInterpolants(VERTEX_INPUT_PARAM_COMMA(VertexInput) intermediates, materialParameters);
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

PS_ENTRY_START(BasePassPS)
	PS_INPUT_STRUCT(VertexOutputParamVSToPS InputPS , 0)
	PS_OUTPUT(float4 OutColor,  0)
#if FORWARD_SHADING == 0
	PS_OUTPUT(float4 OutColorA, 1)
	PS_OUTPUT(float4 OutColorB, 2)
	PS_OUTPUT(float4 OutColorC, 3)
	PS_OUTPUT(float4 OutColorD, 4)
#endif
#if MATERIAL_USE_DEPTH_OFFSET
	PS_OUTPUT_DEPTH
#endif
PS_ENTRY_END(BasePassPS)
{
	MaterialParametersPS materialParameters = VertexFactory_GetMaterialParameterPS(InputPS.factoryInterpolants, SvPosition);
	float4 NDC = SvPositionToNDC(SvPosition);
	float3 worldPos = NDCToWorldPos(NDC);
	Material_CalcParametersPS(materialParameters, SvPosition , worldPos);
	MaterialOutputPS materialOutput = Material_GetOutputPS(materialParameters);

	//float4 color = float4( materialParameters.vectexColor * 0.1 , 1 );
	float4 color = float4(0,0,0,1);
	color.rgb += materialOutput.emissiveColor;

	GBufferData GBuffer;

#if MATERIAL_USE_DEPTH_OFFSET
	GBuffer.worldPos = Material_CorrectWorldPosByDepthOffset(materialOutput, materialParameters, SvDepth);
#else
	GBuffer.worldPos = worldPos;
#endif
	//GBuffer.normal = normalize(vsOutput.normal.xyz);
	GBuffer.normal = Material_GetWorldNormal(materialOutput , materialParameters);
	//GBuffer.normal = materialParameters.worldNormal;

	GBuffer.baseColor = materialOutput.baseColor;
	GBuffer.metallic = materialOutput.metallic;
	GBuffer.roughness = materialOutput.roughness;
	GBuffer.specular = materialOutput.specular;
	GBuffer.shadingModel = materialOutput.shadingModel;

#if FORWARD_SHADING
	OutColor = float4( GBuffer.baseColor , 1 );
#else
	float4 GBufferA, GBufferB, GBufferC, GBufferD;
	EncodeGBuffer(GBuffer, GBufferA, GBufferB, GBufferC, GBufferD);
	OutColor  = color;
	OutColorA = GBufferA;
	OutColorB = GBufferB;
	OutColorC = GBufferC;
	OutColorD = GBufferD;
#endif
}


#endif //PIXEL_SHADER
