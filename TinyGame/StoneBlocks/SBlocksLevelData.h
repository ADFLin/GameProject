#include "SBlocksCore.h"

namespace SBlocks
{
	constexpr uint8 MakeByte(uint8 b0) { return b0; }
	template< typename ...Args >
	constexpr uint8 MakeByte(uint8 b0, Args ...args) { return b0 | (MakeByte(args...) << 1); }

#define M(...) MakeByte( __VA_ARGS__ )

	LevelDesc TestLv =
	{
		//map
		{
			5 ,
			{
				M(0,0,0,0,0),
				M(0,0,0,0,0),
				M(0,0,0,1,0),
				M(0,0,0,0,0),
				M(0,0,0,0,0),
			}
		} ,

		//shape
		{
			{
				3,
				{
					M(1,1,1),
					M(0,1,0),
				},
				true, {1.5 , 0.5},
			},
			{
				3,
				{
					M(0,1,1),
					M(1,1,0),
				},
				true, {1.5 , 1.0},
			},
			{
				3,
				{
					M(1,0,0),
					M(1,1,1),
				},
				true, {1.5 , 1},
			},
			{
				2,
				{
					M(1,1),
				},
				true, {1 , 0.5},
			},
			{
				3,
				{
					M(1,1,1),
				},
				true, {1.5 , 0.5},
			},
			{
				2,
				{
					M(1,1),
					M(1,0),
				},
				true, {0.5 , 0.5},
			},
			{
				2,
				{
					M(1,1),
					M(1,1),
				},
				true, {1 , 1},
			},
		},

		//piece
		{
			{0},
			{1},
			{2},
			{3},
			{4},
			{5},
			{6},
		}
	};

	LevelDesc TestLv2 =
	{
		//map
		{
			6 ,
			{
				M(0,0,0,0,0,0),
				M(0,0,0,0,0,0),
				M(0,0,1,0,0,0),
				M(0,0,0,0,0,0),
				M(0,0,0,0,0,1),
			}
		} ,

		//shape
		{
			{
				3,
				{
					M(1,1,1),
					M(0,1,0),
				},
				true, {1.5 , 0.5},
			},
			{
				3,
				{
					M(0,1,1),
					M(1,1,0),
				},
				true, {1.5 , 1.0},
			},
			{
				3,
				{
					M(1,0,0),
					M(1,1,1),
				},
				true, {1.5 , 1},
			},
			{
				2,
				{
					M(1,1),
				},
				true, {1 , 0.5},
			},
			{
				3,
				{
					M(1,1,1),
				},
				true, {1.5 , 0.5},
			},
			{
				2,
				{
					M(1,1),
					M(1,0),
				},
				true, {0.5 , 0.5},
			},
			{
				2,
				{
					M(1,1),
					M(1,1),
				},
				true, {1 , 1},
			},

			{
				5,
				{
					M(1,1,1,1),
				},
				true, {2.5 , 0.5},
			},
		},

		//piece
		{
			{7},
			{0},
			{1},
			{2},
			{3},
			{4},
			{5},
			{6},

		}
	};

	LevelDesc TestLv3 =
	{
		//map
		{
			8 ,
			{
				M(0,0,0,0,0,0,0,1),
				M(0,0,0,0,0,0,0,1),
				M(1,0,0,0,0,0,1,1),
				M(1,0,1,0,0,0,1,1),
				M(1,0,0,0,0,0,0,0),
				M(0,0,0,0,0,0,0,0),
				M(0,0,0,0,0,0,0,0),
				M(0,0,0,0,0,0,0,0),
			}
		} ,

		//shape
		{
			{
				5,
				{
					M(1,1,0,0,0),
					M(0,1,1,1,1),
				},
				true, {2.5 , 1.0},
			},
			{
				4,
				{
					M(0,0,1,1),
					M(1,1,1,1),
				},
				true, {2.0 , 1.0},
			},
			{
				3,
				{
					M(0,1,1),
					M(0,1,1),
					M(1,1,1),
				},
				true, {1.5 , 1.5},
			},
			{
				3,
				{
					M(1,1,0),
					M(1,1,1),
					M(1,1,1),
				},
				true, {1.5 , 1.5},
			},
			{
				2,
				{
					M(0,1),
					M(0,1),
					M(1,1),
				},
				true, {1 , 1.5},
			},
			{
				4,
				{
					M(1,1,0,0),
					M(1,1,0,0),
					M(1,1,1,0),
					M(1,1,1,1),
					M(1,1,1,1),
				},
				true, {2 , 2.5},
			},
			{
				4,
				{
					M(0,0,1,1),
					M(0,0,1,1),
					M(1,1,1,1),
				},
				true, {2.5 , 1.5},
			},
		},

		//piece
		{
			{0},
			{1},
			{2},
			{3},
			{4},
			{5},
			{6},
			{7},
		}
	};

#undef M
}