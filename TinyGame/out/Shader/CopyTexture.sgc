#include "Common.sgc"
#include "ScreenVertexShader.sgc"

#if PIXEL_SHADER

in VSOutputParameters VSOutput;

uniform sampler2D CopyTexture;

PS_ENTRY_START(CopyTexturePS)
	PS_INPUT(VSOutput, 0)
	PS_OUTPUT_LAST( float4 OutColor , 0 )
PS_ENTRY_END(CopyTexturePS)
{
	float2 UVs = VSOutput.UVs;
	OutColor = texture(CopyTexture, UVs);
}


uniform float4 ColorMask;
PS_ENTRY_START(CopyTextureMaskPS)
	PS_INPUT(VSOutput, 0)
	PS_OUTPUT_LAST(float4 OutColor, 0)
PS_ENTRY_END(CopyTextureMaskPS)
{
	float2 UVs = VSOutput.UVs;
	float c = dot(texture(CopyTexture, UVs), ColorMask);
	OutColor = float4( c , c , c , 1 );
}


uniform float2 ColorBais;
PS_ENTRY_START(CopyTextureBiasPS)
	PS_INPUT(VSOutput, 0)
	PS_OUTPUT_LAST(float4 OutColor, 0)
PS_ENTRY_END(CopyTextureBiasPS)
{
	float2 UVs = VSOutput.UVs;
	float3 color = ColorBais.x * texture(CopyTexture, UVs).rgb + ColorBais.y;
	//OutColor = texture(CopyTexture, UVs).rgb;
	OutColor = float4(color, 1);
}

uniform float2 ValueFactor;

const float3 Color[] =
{
	float3(0,0,0),
	float3(1,0,0),
	float3(0,1,0),
	float3(0,0,1),
	float3(1,1,0),
	float3(0,1,1),
	float3(1,0,1),
	float3(1,0.5,0.5),
	float3(0.5,1,0.5),
	float3(0.5,0.5,1),
};

PS_ENTRY_START(MappingTextureColorPS)
	PS_INPUT(VSOutput, 0)
	PS_OUTPUT_LAST(float4 OutColor, 0)
PS_ENTRY_END(MappingTextureColorPS)
{
	vec2 UVs = VSOutput.UVs;
	float c = dot(texture(CopyTexture, UVs), ColorMask);
	int idx = int( round(ValueFactor.x * c + ValueFactor.y) );
	if ( idx < 0 || idx > 9 )
		OutColor = float4(1, 1, 1, 1);
	OutColor = float4( Color[idx] , 1 );
	//OutColor = float4(c, c, c, 1);
}

#endif //PIXEL_SHADER