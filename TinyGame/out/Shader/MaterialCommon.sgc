#pragma once
#include "Common.sgc"

#ifndef MATERIAL_TEXCOORD_NUM
#define MATERIAL_TEXCOORD_NUM 0
#endif

#ifndef MATERIAL_BLENDING_MASKED
#define MATERIAL_BLENDING_MASKED 0
#endif

#ifndef MATERIAL_USE_DEPTH_OFFSET
#define MATERIAL_USE_DEPTH_OFFSET 0
#endif

#ifndef MATERIAL_USE_WORLD_NORMAL
#define MATERIAL_USE_WORLD_NORMAL 0
#endif

#define SHADINGMODEL_UNLIT        1
#define SHADINGMODEL_DEFAULT_LIT  2

#if VERTEX_SHADER

struct MaterialInputVS
{
	float3 worldOffset;
};

struct MaterialParametersVS
{
	float4 vertexPos;
	float3 worldPos;
	float4 vectexColor;
	float3 noraml;
#if MATERIAL_TEXCOORD_NUM
	float2 texCoords[MATERIAL_TEXCOORD_NUM];
#endif
};

MaterialInputVS InitMaterialInputVS()
{
	MaterialInputVS input;
	input.worldOffset = float3(0.0);
	return input;
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

struct MaterialInputPS
{
	float3 baseColor;
	float3 normal;
	float3 emissiveColor;
	float  metallic;
	float  specular;
	float  roughness;
	float  mask;
	float  opacity;
	float  depthOffset;
	uint   shadingModel;
};

struct MaterialParametersPS
{
	float4 vectexColor;
	float3 worldPos;
	float4 clipPos;
	float4 NDC;
	float3 worldNormal;
	mat3   tangentToWorld;
#if MATERIAL_TEXCOORD_NUM
	float2 texCoords[MATERIAL_TEXCOORD_NUM];
#endif
};

#if USE_TESSELLATION
struct MaterialInputDS
{
	float3 worldDispOffset;
};

#endif

MaterialInputPS InitMaterialInputPS()
{
	MaterialInputPS input;
	input.baseColor = float3(0.0);
	input.normal = float3(0.0, 0.0, 1);
	input.emissiveColor = float3(0.0);
	input.metallic = 0.0;
	input.specular = 0.0;
	input.roughness = 0.0;
	input.mask = 1.0;
	input.opacity = 0.5;
	input.shadingModel = SHADINGMODEL_DEFAULT_LIT;
	input.depthOffset = 0.0;
	return input;
}

float3 GetTextureNormal(sampler2D texture, float2 UVs)
{
	return 2 * texture2D(texture, UVs).xyz - 1;
}
#endif //PIXEL_SHADER



