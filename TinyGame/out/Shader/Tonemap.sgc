#include "Common.sgc"
#include "ScreenVertexShader.sgc"
#include "PostProcessCommon.sgc"

#ifndef USE_BLOOM
#define USE_BLOOM 0
#endif

#if PIXEL_SHADER

float LinearToSRGB(float value)
{
	const float a = 0.055;
	if( value <= 0.00304 )
		return 12.92 * value;

	return (1 + a) * pow(value, 1.0 / 2.4) - a;
}

GLOBAL_CONST float Gamma = 2.2;
float3 simpleReinhardToneMapping(float3 color)
{
	float exposure = 1.;
	color *= exposure / (1. + color / exposure);
	color = pow(color, (1. / Gamma).xxx);
	return color;
}

float3 lumaBasedReinhardToneMapping(float3 color)
{
	float luma = dot(color, float3(0.2126, 0.7152, 0.0722));
	float toneMappedLuma = luma / (1. + luma);
	color *= toneMappedLuma / luma;
	color = pow(color, (1. / Gamma).xxx);
	return color;
}

#if USE_BLOOM
DEFINE_TEXTURE(Texture2D, BloomTexture);
#endif

PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT( VSOutputParameters VSOutput, 0 )
	PS_OUTPUT( float4 OutColor, 0 )
PS_ENTRY_END(MainPS)
{
	float4 color = TEXTURE_SAMPLE(TextureInput0, VSOutput.UVs);

	//color.rgb = lumaBasedReinhardToneMapping(color.rgb);
#if USE_BLOOM
	color.rgb += TEXTURE_SAMPLE(BloomTexture, VSOutput.UVs).rgb;
#endif

	OutColor.rgb = color.rgb;
	OutColor.r = LinearToSRGB(color.r);
	OutColor.g = LinearToSRGB(color.g);
	OutColor.b = LinearToSRGB(color.b);
	OutColor.a = color.a;
}

#endif