#include "Common.sgc"
#include "ScreenVertexShader.sgc"
#include "LightingCommon.sgc"

#define  USE_CUBE_TEXTURE 1

#if PIXEL_SHADER

in VSOutputParameters VSOutput;
layout(location = 0) out float4 OutColor;

uniform float3 FaceDir;
uniform float3 FaceUpDir;

uniform sampler2D Texture;
uniform samplerCube CubeTexture;

const float2 invAtan = float2(0.1591, 0.3183);
float2 EquirectangularCoord(float3 v)
{
	float2 uv = float2(atan(v.x, v.y), asin(v.z));
	uv *= invAtan;
	uv += 0.5;
	return uv;
}

float3 GetEnvRadiance(float3 dir)
{
#if USE_CUBE_TEXTURE
	return texture(CubeTexture, dir).rgb;
#else
	return texture2D(Texture, EquirectangularCoord(dir)).rgb;
#endif
}

float3 GetFaceCameraDir(float2 faceUV)
{
	float2 NDC = 2 * faceUV - 1;
	float3 faceRightDir = cross(FaceDir, FaceUpDir);
	return normalize(FaceDir + NDC.x * faceRightDir + NDC.y * FaceUpDir);
}

void EquirectangularToCubePS()
{
	float3 dir = GetFaceCameraDir(VSOutput.UVs);
	float3 color = texture2D(Texture, EquirectangularCoord(dir)).rgb;
	OutColor = float4(color, 1);
}

void IrradianceGemPS()
{
	float3 axisZ = GetFaceCameraDir(VSOutput.UVs);

	float3 axisY = float3(0, 0, 1);
	float ZoY = dot(axisZ, axisY);
	if( abs(ZoY) < 1.0e-5 )
	{
		axisY = float3(0, 1, 0);
		ZoY = dot(axisZ, axisY);
	}
	axisY = normalize(axisZ - ZoY * axisY);
	float3 axisX = normalize(cross(axisZ, axisY));

	float3 N = axisZ;
	float3x3 R = float3x3(axisX, axisY, axisZ);

	const int SampleM = 128;
	const int SampleN = 100;

	float dPhi = 2.0 * PI / SampleM;
	float dTheta = 0.5 * PI / SampleN;

	float3 irradiance = float3(0, 0, 0);
	for( int m = 0; m < SampleM; ++m )
	{
		float2 csPhi;
		sincos(float(m) * dPhi, csPhi.y, csPhi.x);
		for( int n = 0; n < SampleN; ++n )
		{
			float2 csTheta;
			sincos(float(n) * dTheta, csTheta.y, csTheta.x);
			float3 L = normalize(R * float3(csTheta.y * csPhi, csTheta.x));
			irradiance += csTheta.x * csTheta.y * GetEnvRadiance(L);
		}
	}

	irradiance *= PI / (SampleN * SampleM);
	OutColor = float4(irradiance, 1);

}


float RadicalInverse_VdC(uint bits)
{
	bits = (bits << 16u) | (bits >> 16u);
	bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
	bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
	bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
	bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
	return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
// ----------------------------------------------------------------------------
float2 Hammersley(uint i, uint N)
{
	return float2(float(i) / float(N), RadicalInverse_VdC(i));
}

float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
	float a = roughness*roughness;

	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta*cosTheta);

	// from spherical coordinates to cartesian coordinates
	float3 H;
	H.x = cos(phi) * sinTheta;
	H.y = sin(phi) * sinTheta;
	H.z = cosTheta;

	// from tangent-space vector to world-space sample vector
	float3 up = abs(N.z) < 0.999 ? float3(0.0, 0.0, 1.0) : float3(1.0, 0.0, 0.0);
	float3 tangent = normalize(cross(up, N));
	float3 bitangent = cross(N, tangent);

	float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
	return normalize(sampleVec);
}


uniform float Roughness;

void PrefilteredGenPS()
{

	float3 N = GetFaceCameraDir(VSOutput.UVs);
	float3 R = N;
	float3 V = R;

	const uint SAMPLE_COUNT = 2048u;
	float totalWeight = 0.0;
	float3 prefilteredColor = float3(0.0);
	for( uint i = 0u; i < SAMPLE_COUNT; ++i )
	{
		float2 Xi = Hammersley(i, SAMPLE_COUNT);
		float3 H = ImportanceSampleGGX(Xi, N, Roughness);
		float3 L = normalize(2.0 * dot(V, H) * H - V);

		float NoL = saturate(dot(N, L));
		if( NoL > 0.0 )
		{
			prefilteredColor += GetEnvRadiance(L).rgb * NoL;
			totalWeight += NoL;
		}
	}
	prefilteredColor = prefilteredColor / totalWeight;

	OutColor = vec4(prefilteredColor, 1.0);
}


float2 IntegrateBRDF(float NoV, float roughness)
{
	float3 V;
	V.x = sqrt(1.0 - NoV*NoV);
	V.y = 0.0;
	V.z = NoV;

	float A = 0.0;
	float B = 0.0;

	float3 N = float3(0.0, 0.0, 1.0);

	const uint SAMPLE_COUNT = 1024u;
	for( uint i = 0u; i < SAMPLE_COUNT; ++i )
	{
		float2 Xi = Hammersley(i, SAMPLE_COUNT);
		float3 H = ImportanceSampleGGX(Xi, N, roughness);
		float3 L = normalize(2.0 * dot(V, H) * H - V);

		float NoL = saturate(L.z);
		float NoH = saturate(H.z);
		float VoH = saturate(dot(V, H));

		if( NoL > 0.0 )
		{
			float G = Vis_SmithIBL(roughness, NoV, NoL);
			float G_Vis = (G * VoH) / (NoH * NoV);
			float Fc = pow(1.0 - VoH, 5.0);

			A += (1.0 - Fc) * G_Vis;
			B += Fc * G_Vis;
		}
	}
	A /= float(SAMPLE_COUNT);
	B /= float(SAMPLE_COUNT);
	return float2(A, B);
}


void PreIntegrateBRDFGenPS()
{
	float2 integratedBRDF = IntegrateBRDF( VSOutput.UVs.x , VSOutput.UVs.y );
	OutColor = float4( integratedBRDF , 0 , 1 );
}
#endif