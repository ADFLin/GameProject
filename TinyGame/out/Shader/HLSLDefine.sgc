#ifndef SHADER_COMPILING
#define SHADER_COMPILING 0
#endif


#if SHADER_COMPILING

#define layout( x )
#define uniform

#define mat4 float4x4
#define mat3 float3x3

#else

#define SV_POSITION
#define SV_DispatchThreadID

#define TEXCOORD0
#define TEXCOORD1
#define TEXCOORD2
#define TEXCOORD3
#define TEXCOORD4
#define TEXCOORD5
#define TEXCOORD6
#define TEXCOORD7
#define TEXCOORD8
#define TEXCOORD9
#define TEXCOORD10
#define TEXCOORD11
#define TEXCOORD12
#define TEXCOORD13
#define TEXCOORD14
#define TEXCOORD15

template< class T >
struct RWTexture1D {};
template< class T >
struct RWTexture2D {};
template< class T >
struct RWTexture3D {};

template< class T >
struct StructuredBuffer
{
	T operator[](int index);
};

#endif

#define GLOBAL_CONST static const

#define UNROLL [unroll]
#define LOOP [loop]
#define BRANCH [branch]
#define FLATTEN [falltten]

#define flat nointerpolation

#define VFLIP(UV) float2( (UV).x , 1 - (UV).y )

#define MEMBER_OUT( NAME ) :NAME

#define SHADER_INPUT(TYPE_DECL , LOC) in TYPE_DECL : LOC,
#define SHADER_OUTPUT(TYPE_DECL , LOC) out TYPE_DECL,
#define SHADER_OUTPUT_LAST(TYPE_DECL , LOC)  out TYPE_DECL


#if VERTEX_SHADER

#define VS_ENTRY_START(NAME) void NAME(
#define VS_INPUT_VERTEXID in uint SvVertexID : SV_VertexID,
#define VS_INPUT_INSTANCEID in uint SvInstanceID : SV_InstanceID,
#define VS_INPUT_PARAMETERS( TYPE_DECL ) in TYPE_DECL ,
#define VS_INPUT(TYPE_DECL , LOC) SHADER_INPUT(TYPE_DECL , LOC)
#define VS_OUTPUT_POINTSIZE out float SvPointSize : PSIZE,
#define VS_OUTPUT(TYPE_DECL , LOC) out TYPE_DECL : TEXCOORD##LOC,
#define VS_OUTPUT_STRUCT( TYPE_DECL , LOC ) SHADER_OUTPUT( TYPE_DECL , LOC)
#define VS_ENTRY_END(NAME)  out float4 SvPosition : SV_POSITION )


#define DECLARE_VERTEX_INPUT_START( NAME ) struct NAME {
#define DECLARE_VERTEX_INPUT(TYPE , NAME , ATTRIBUTE) TYPE NAME : ATTRIBUTE;
#define DECLARE_VERTEX_INPUT_END( NAME )  };

#define VERTEX_INPUT( NAME ) VertexInput.##NAME
#define VERTEX_INPUT_PARAM( CODE ) CODE

#elif PIXEL_SHADER
#define PS_ENTRY_START(NAME) void NAME(
#define PS_INPUT(TYPE_DECL , LOC) in TYPE_DECL : TEXCOORD##LOC,
#define PS_INPUT_STRUCT(TYPE_DECL , LOC) in TYPE_DECL,
#define PS_OUTPUT(TYPE_DECL , LOC) out TYPE_DECL : SV_Target##LOC,
#define PS_OUTPUT_DEPTH out float SvDepth : SV_Depth,
#define PS_ENTRY_END(NAME)  in float4 SvPosition : SV_POSITION )
#elif GEOMETRY_SHADER
#define GS_SVPOSITION( INDEX ) SvPositions[ INDEX ]
#define GS_NO_MEMBER_PARAM
#define GS_SV_POSTITION_OUT float4 SvPosition : SV_POSITION;
#define GS_EMIT_VERTEX( SV_POS , PARAMS )\
	PARAMS.SvPosition = SV_POS;\
	OutputStream.Append(PARAMS);
#define GS_END_PRIMITIVE OutputStream.RestartStrip()
	
#endif


#define DEFINE_TEXTURE( TYPE , NAME )\
	 uniform TYPE NAME;\
	 uniform SamplerState NAME##Sampler;


#if COMPUTE_SHADER
#define TEXTURE_SAMPLE( NAME , UV )\
	NAME.SampleLevel(NAME##Sampler, UV, 0)
#else
#define TEXTURE_SAMPLE( NAME , UV )\
	NAME.Sample(NAME##Sampler, UV)
#endif
#define TEXTURE_SAMPLE_LEVEL( NAME , UV , LOD )\
	NAME.SampleLevel(NAME##Sampler, UV , LOD )

float4 TextureLoad(Texture1D inTexture, int UV, int LOD)
{
	return inTexture.Load(int2(UV, LOD));
}
float4 TextureLoad(Texture2D inTexture, int2 UV, int LOD)
{
	return inTexture.Load(int3(UV, LOD));
}
float4 TextureLoad(Texture3D inTexture, int3 UV, int LOD)
{
	return inTexture.Load(int4(UV, LOD));
}

uint2 TextureSize(Texture2D inTexture)
{
	uint2 result;
	inTexture.GetDimensions(result.x, result.y);
	return result;
}

#define TEXTURE_FETCH( NAME , UV , LOD ) TextureLoad( NAME , UV , LOD )

float4x4 inverse(float4x4 input)
{
#define minor(a,b,c) determinant(float3x3(input.a, input.b, input.c))
	//determinant(float3x3(input._22_23_23, input._32_33_34, input._42_43_44))

	float4x4 cofactors = float4x4(
		minor(_22_23_24, _32_33_34, _42_43_44),
		-minor(_21_23_24, _31_33_34, _41_43_44),
		minor(_21_22_24, _31_32_34, _41_42_44),
		-minor(_21_22_23, _31_32_33, _41_42_43),

		-minor(_12_13_14, _32_33_34, _42_43_44),
		minor(_11_13_14, _31_33_34, _41_43_44),
		-minor(_11_12_14, _31_32_34, _41_42_44),
		minor(_11_12_13, _31_32_33, _41_42_43),

		minor(_12_13_14, _22_23_24, _42_43_44),
		-minor(_11_13_14, _21_23_24, _41_43_44),
		minor(_11_12_14, _21_22_24, _41_42_44),
		-minor(_11_12_13, _21_22_23, _41_42_43),

		-minor(_12_13_14, _22_23_24, _32_33_34),
		minor(_11_13_14, _21_23_24, _31_33_34),
		-minor(_11_12_14, _21_22_24, _31_32_34),
		minor(_11_12_13, _21_22_23, _31_32_33)
	);
#undef minor
	return transpose(cofactors) / determinant(input);
}

float BufferDepthToClipZ(float bufferDepth)
{
	return bufferDepth;
}


#if PIXEL_SHADER

void WritePixelDepth(float NDCz)
{

}

#endif