#include "Common.sgc"

#include "ViewParam.sgc"

#ifndef USE_OIT
#define USE_OIT 0
#endif

#if USE_OIT
#include "OITCommon.sgc"
#endif

struct OutputVSParam
{
	float3 pos;
	float4 color;
	float3 normal;
};

#if VERTEX_SHADER
VS_ENTRY_START(MainVS)
	VS_INPUT(float3 InPos, ATTRIBUTE_POSITION)
	VS_INPUT(float4 InColor, ATTRIBUTE_COLOR)
	VS_INPUT(float3 InNormal, ATTRIBUTE_NORMAL)
	VS_OUTPUT_STRUCT(OutputVSParam OutputVS, 0)
VS_ENTRY_END(MainVS)
{
	OutputVS.pos = InPos;
	OutputVS.normal = InNormal;
	OutputVS.color = InColor;

	float4 clipPos = mul(View.worldToClip, float4(InPos, 1.0));
	SvPosition = clipPos;
}
#endif //VERTEX_SHADER


#if PIXEL_SHADER

#if USE_OIT
PS_EARLY_DEPTH_TEST
#endif
PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT(OutputVSParam OutputVS, 0)
	PS_INPUT_IS_FRONT_FACE
#if USE_OIT
#else
	PS_OUTPUT(float4 OutColor, 0)
#endif
PS_ENTRY_END(MainPS)
{
	float3 normal = normalize(OutputVS.normal);
	if (!SvIsFrontFace)
		normal = -normal;

	float3 color = dot(normal, float3(0, 0, 1)) * OutputVS.color.rgb;
	float alpha = OutputVS.color.a;
	//color = (0.5 * normal + 0.5);
#if USE_OIT
	float pixelDepth = (View.worldToView * float4(OutputVS.pos, 1)).z;
	OITProcessPS(float4(color , alpha), pixelDepth);
#else
	OutColor = float4(color, alpha);
#endif

}

#endif //PIXEL_SHADER