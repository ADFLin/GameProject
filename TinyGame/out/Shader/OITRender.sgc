
#include "Common.sgc"
#include "ViewParam.sgc"

#ifndef OIT_USE_MATERIAL
#define OIT_USE_MATERIAL 0
#endif

#if OIT_USE_MATERIAL
#include "MaterialProcess.sgc"
#include "VertexProcess.sgc"
#endif

struct OutputVSParam
{
	float4 pos;
	float4 color;
	float4 viewPos;
};

#if VERTEX_SHADER

#if OIT_USE_MATERIAL

out VertexFactoryOutputVS VFOutputVS;

#else //OIT_USE_MATERIAL

out OutputVSParam OutputVS;
uniform float4 BaseColor;
uniform mat4   WorldTransform;
layout(location = ATTRIBUTE_POSITION) in float3 InPosition;
layout(location = ATTRIBUTE_NORMAL) in float3 InNoraml;

#endif //OIT_USE_MATERIAL

void BassPassVS()
{

#if OIT_USE_MATERIAL
	VertexFactoryIntermediatesVS intermediates = GetVertexFactoryIntermediatesVS();

	MaterialInputVS materialInput = InitMaterialInputVS();
	MaterialParametersVS materialParameters = GetMaterialParameterVS(intermediates);

	CalcMaterialInputVS(materialInput, materialParameters);

	gl_Position = CalcVertexFactoryOutputVS(VFOutputVS, intermediates, materialInput, materialParameters);

#else //OIT_USE_MATERIAL
	float4 worldPos = WorldTransform * float4(InPosition, 1.0);
	OutputVS.pos = View.worldToClip * worldPos;
	OutputVS.color = float4(clamp(InPosition / 10 , 0, 1), 0.2);
	float3 normal = mat3(WorldTransform) * InNoraml;
	OutputVS.color *= float4( 0.5 * normal + 0.5 , 1.0);
	OutputVS.viewPos = View.worldToView * worldPos;
	gl_Position = View.worldToClip * worldPos;
#endif // OIT_USE_MATERIAL
}

layout(location = 0) in float4 InScreenPos;
void ScreenVS()
{
	gl_Position = InScreenPos;
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

layout(rgba16f) uniform restrict image2D ColorStorageRWTexture;
layout(rgba32i) uniform restrict iimage2D NodeAndDepthStorageRWTexture;
layout(r32ui) uniform coherent uimage2D NodeHeadRWTexture;
layout(offset = 0, binding = 0) uniform atomic_uint NextIndex;

#ifndef OIT_STORAGE_SIZE
#define OIT_STORAGE_SIZE 4096
#endif

const uint MaxStoragePixelCount = OIT_STORAGE_SIZE * OIT_STORAGE_SIZE;

int2 IndexToStoragePos(uint index)
{
	return int2(index % OIT_STORAGE_SIZE, index / OIT_STORAGE_SIZE);
}

int PackAlpha(float value)
{
	return int( value * 255.0 * 255.0 );
}

float UnpackAlpha(int value)
{
	return float(value ) / ( 255.0 * 255.0 );
}

#if OIT_USE_MATERIAL
#define VFInputPS VFOutputVS
in VertexFactoryIutputPS VFOutputVS;
#else //OIT_USE_MATERIAL
in OutputVSParam OutputVS;
#endif //OIT_USE_MATERIAL

layout(location = 0) out float4 OutColor;

layout(early_fragment_tests) in;
void BassPassPS()
{
#if OIT_USE_MATERIAL
	MaterialInputPS materialInput = InitMaterialInputPS();
	MaterialParametersPS materialParameters = GetMaterialParameterPS(VFInputPS);

	CalcMaterialParameters(materialInput, materialParameters);

	float3 pixelColor = materialInput.baseColor;
	float  pixelAlpha = materialInput.opacity;
	pixelAlpha = 0.4;
	//float  pixelDepth = materialParameters.screenPos.z;
	float  pixelDepth = -(View.worldToView * float4(materialParameters.worldPos, 1)).z;
#else //OIT_USE_MATERIAL
	float3 pixelColor = OutputVS.color.rgb;
	float  pixelAlpha = OutputVS.color.a;
	float  pixelDepth = 0.5 * OutputVS.pos.z + 0.5;

#endif //OIT_USE_MATERIAL

	if( pixelAlpha < 0.01 )
		discard;

	uint index = atomicCounterIncrement(NextIndex) + 1;
	if ( index < MaxStoragePixelCount )
	{
		int2 screenPos = int2(gl_FragCoord.xy);
		uint indexPrev = imageAtomicExchange(NodeHeadRWTexture, screenPos, index);

		int2 storagePos = IndexToStoragePos(index);
		imageStore(ColorStorageRWTexture, storagePos, float4( pixelColor, pixelDepth ) );
		imageStore(NodeAndDepthStorageRWTexture, storagePos, int4(indexPrev, PackAlpha(pixelAlpha), 0, 0));
	}

	OutColor = float4(1, 0, 0, 0);
	//gl_FragColor = float4(index, 0, 0, 0);
}


layout(location = 1) out int2 OutValue;
void ClearStoragePS()
{
	OutColor = float4(1, 0, 0, 0);
	OutValue = int2(-1, 0);
}

#endif //PIXEL_SHADER


