#include "ViewParam.sgc"

uniform float4 clipPlane;

struct PrimitiveParameters
{
	mat4 localToWorld;
	mat4 worldToLocal;
};

uniform PrimitiveParameters Primitive = PrimitiveParameters( 
   mat4( 1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1 ) ,
   mat4( 1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1 ) );

struct VSOutputParameters
{

};

#if VERTEX_SHADER


float4 VSOutputMain( out VSOutputParameters outVS )
{

}

out VSOutputParameters VSOutput;
void MainVS()
{
	gl_Position = VSOutputMain( VSOutput );
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

#define FSINPUT_LOCAL_SPACE
struct FSInput 
{

};

in VSOutputParameters VSOutput;
bool FSInputMain( in VSOutputParameters inVS , out FSInput outFS )
{
	return true;
}

void FSDepthCorrect( in FSInput inFS )
{

}

float3 FSLightOffset( float3 lightPos , float3 V )
{
#ifdef FSINPUT_LIGHT_POS_TRANSFORMED
	return lightPos  - V;
#elif defined( FSINPUT_LOCAL_SPACE )
	return float3( Primitive.worldToLocal * float4( lightPos , 1 ) ) - V;
#elif defined( FSINPUT_WORLD_SPACE )
	return lightPos  - V;
#elif defined(FSINPUT_VIEW_SPACE )
	return float3( View.worldToView * float4( lightPos , 1 ) ) - V;
#elif defined(FSINPUT_VIEW_TSPACE )
	return lightPos  - V;
#elif defined( FSINPUT_LOCAL_TSPACE )
	return lightPos  - V;
#endif
}

float3 FSLighting( in FSInput inFS )
{
	float3 V = inFS.vertex;
	float3 N = inFS.normal;
	float3 E = inFS.viewDir;

	float3 color = float3(0,0,0);
	for( int i = 0 ; i < 4 ; ++i )
	{
		float3 L = FSLightOffset( LightPos[i] , V );
		L = normalize( L );
		float diff = clamp( dot( L , N ) , 0 , 1 );
		float spec = 0;

		if ( diff > 0 )
		{
			float3 R = normalize(-reflect(L,N)); 
			spec = clamp( pow( max( dot(R,E), 0.0 ) , 20 ) , 0.0 , 1.0 );
			//vec3 H = normalize( L + E );  
			//spec = clamp( pow( max( dot(H,N), 0.0 ) , 100 ) , 0.0 , 1.0 );
		}
		color += ( diff + spec ) * LightColor[i];
	}
	return color;
}


void MainPS() 
{
	FSInput inFS;
	if ( !FSInputMain( VSOutput , inFS ) )
		return;

	FSDepthCorrect( inFS );

	//gl_FragColor = vec4( 0.5 * N + 0.5 , 1.0 );
	float3 color = FSLighting( inFS );
	gl_FragColor = float4( color , 1.0 );
}

#endif //PIXEL_SHADER
