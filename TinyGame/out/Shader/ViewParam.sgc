#pragma once
#include "Common.sgc"

struct ViewParameters
{
	mat4   worldToView;
	mat4   worldToClip;
	mat4   viewToWorld;  
	mat4   viewToClip;
	mat4   clipToView;
	mat4   clipToWorld;

	float4 rectPosAndSizeInv;
	float3 worldPos;
	float  realTime;

	float3 direction;
	float  gameTime;

};


#if SHADER_COMPILING
layout(std140) uniform ViewBlock
{
	uniform ViewParameters View;
};
#else
uniform ViewParameters View;
#endif


uniform sampler2D FrameDepthTexture;

float2 ScreenUVToBufferUV(float2 screenUVs)
{
	return screenUVs + View.rectPosAndSizeInv.xy * View.rectPosAndSizeInv.zw;
}
float2 BufferUVToScreenUV(float2 bufferUVs)
{
	return bufferUVs - View.rectPosAndSizeInv.xy * View.rectPosAndSizeInv.zw;
}
float BufferDepthToSceneDepth(float depth)
{
	float sceneDepth = (depth - View.viewToClip[3][2]) / View.viewToClip[2][2];
	//return depth;
	return sceneDepth;
}

float ScreenUVToSceneDepth(float2 screenUVs)
{
	float depth = texture2D(FrameDepthTexture, ScreenUVToBufferUV(screenUVs)).r;
	return BufferDepthToSceneDepth(depth);
}

float3 StoreWorldPos(float2 screenUVs, float bufferDepth)
{
	float sceneDepth = BufferDepthToSceneDepth(bufferDepth);
	float2 screenPos = (2.0 * screenUVs - 1.0);
	float4 clipPos = float4(bufferDepth * screenPos, bufferDepth, 1);
	float4 pos = View.clipToWorld * clipPos;
	return pos.xyz / pos.w;
}

float3 ScreenUVToWorldPos(float2 screenUVs)
{
	return StoreWorldPos(screenUVs, texture2D(FrameDepthTexture, ScreenUVToBufferUV(screenUVs)).r);
}

