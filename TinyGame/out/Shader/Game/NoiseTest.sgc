#include "Common.sgc"

#include "ScreenVertexShader.sgc"
#include "NoiseCommon.sgc"
#include "ViewParam.sgc"
#include "GeometryTestCommon.sgc"
#include "TiledLightCommon.sgc"
#include "LightingCommon.sgc"
#include "ScatteringCommon.sgc"

uniform float Time;
uniform sampler2D RandTexture;
uniform sampler2D NoiseTexture;
uniform sampler3D VolumeTexture;
uniform sampler3D NoiseVolumeTexture;

#ifndef USE_RAND_TEXTURE
#define USE_RAND_TEXTURE 1
#endif
#ifndef USE_FBM_FACTOR
#define USE_FBM_FACTOR 0
#endif

#define TEX_SIZE 512.0

float MyRandom(float2 uv)
{
#if USE_RAND_TEXTURE
	return texture(RandTexture, uv / TEX_SIZE).x;
#else

	return PseudoRandom(uv);

#endif
}


float SimpleNoise(float2 uv)
{
	float2 i = floor(uv) + float2(0.5);
	float2 f = frac(uv);

	// Four corners in 2D of a tile
	float a = MyRandom(i);
	float b = MyRandom(i + float2(1.0, 0.0));
	float c = MyRandom(i + float2(0.0, 1.0));
	float d = MyRandom(i + float2(1.0, 1.0));

	float2 u = PerlinFade(f);

#if 0
	return lerp(a, b, u.x) +
		(c - a)* u.y * (1.0 - u.x) +
		(d - b) * u.x * u.y;
#else
	return lerp(lerp(a, b, u.x), lerp(c, d, u.x), u.y);

#endif
}


uniform float4 FBMFactor;
float FBM(float2 uv, int numOctaves)
{
	float v = 0.0;
	float a = 0.5;
#if USE_FBM_FACTOR
	float2 shift = float2(FBMFactor.x);
	// Rotate to reduce axial bias
	float2x2 rot = FBMFactor.y * float2x2(cos(FBMFactor.z), sin(FBMFactor.z),
					                     -sin(FBMFactor.z), cos(FBMFactor.z));
#else
	float2 shift = float2(100.0);
	// Rotate to reduce axial bias
	float2x2 rot = float2x2(cos(0.5), sin(0.5),
							-sin(0.5), cos(0.50));
#endif
	for( int i = 0; i < numOctaves; ++i )
	{
		v += a * SimpleNoise(uv);
		uv = rot * uv * 2.0 + shift;
		a *= 0.5;
	}
	return v;
}

float F(float2 uv, int numOctaves)
{
	return FBM(uv + FBM(uv + FBM(uv, numOctaves), numOctaves), numOctaves);
}

#if PIXEL_SHADER

in VSOutputParameters VSOutput;
layout(location = 0) out float4 OutColor;
void MainPS()
{
#if USE_FBM_FACTOR
	int numOctaves = int(FBMFactor.w);
#else
	int numOctaves = 5;
#endif
	float2 st = VSOutput.UVs * 10.;
	// st += st * abs(sin(u_time*0.1)*3.0);
	float3 color = float3(0.0);

	float2 q = float2(0.);
	q.x = F(st + 0.00*Time, numOctaves);
	q.y = F(st + float2(1.0), numOctaves);

	float2 r = float2(0.);
	r.x = FBM(st + 1.0*q + float2(1.7, 9.2) + 0.15*Time, numOctaves);
	r.y = FBM(st + 1.0*q + float2(8.3, 2.8) + 0.126*Time, numOctaves);

	float f = FBM(st + r, numOctaves);

	color = lerp(vec3(0.101961, 0.619608, 0.666667),
				vec3(0.666667, 0.666667, 0.498039),
				clamp((f*f)*4.0, 0.0, 1.0));

	color = lerp(color,
				vec3(0, 0, 0.164706),
				clamp(length(q), 0.0, 1.0));

	color = lerp(color,
				vec3(0.666667, 1, 1),
				clamp(length(r.x), 0.0, 1.0));

	float v = MyRandom(0.01*VSOutput.UVs);

	v = SimpleNoise(5*VSOutput.UVs);

	v = FBM(st, numOctaves);
	v = F(st + Time, numOctaves);
	//v = FBM(3 * vsOutput.UVs,5);
	OutColor = float4(v, v, v, 1);
	//OutColor = float4(color, 1);
	

	//OutColor = float4(1, v, v, 1);
}


float FBMTest(float2 uv , int octaves)
{
	float result = 0;
	float amp = 1.0;
	float total = 0;

	float2 shift = float2(FBMFactor.x);
	// Rotate to reduce axial bias

	float c, s;
	sincos(FBMFactor.z, s, c);
	float2x2 rot = FBMFactor.y * float2x2(c, s,
										  -s,c);

	for( int i = 0; i < octaves; ++i )
	{
		result += amp *  texture(NoiseTexture, uv).x;
		uv = rot * uv * 2.0 + shift;
		//uv *= 2;
		total += amp;
		amp *= 0.5;
	}
	return result / total;
}

void TestPS()
{

	float noise = texture(NoiseTexture, VSOutput.UVs).x;
	OutColor = float4(noise.xxx, 1);


	OutColor = float4(FBMTest(VSOutput.UVs, 3).xxx, 1);
	float v = texture3D(NoiseVolumeTexture, float3(VSOutput.UVs, Time * 0.05 )).x;
	OutColor = float4(v.xxx, 1);
	//OutColor = float4(1,1,0, 1);

}


#if 1
float GetFBM(float3 pos, const float maxOctaves, const float frequency, bool turbulence = false)
{
	const float normalizationFactorNoise3DTex = 1.66f;

	const float3x3 rot = float3x3(0.0f, 0.8f, 0.6f, -0.8f, 0.36f, -0.48f, -0.6f, -0.48f, 0.64f);
	pos.xyz = pos.xyz* rot;

	float f = 0.0f;
	float amplitude = 1.0f;
	float sum = 0.0f;

	for( float i = 0.0f; i < maxOctaves; ++i )
	{
		float value = texture3D(NoiseVolumeTexture, pos).x;
		if( turbulence )
		{
			//f += amplitude * (noiseTex.SampleLevel(noiseSampler, pos.xyz, 0.0f).w * 2.0f - 1.0f);
			f += amplitude * abs(value * 2.0f - 1.0f) * normalizationFactorNoise3DTex;
		}
		else
		{
			//f += amplitude * (noiseTex.SampleLevel(noiseSampler, pos.xyz, 0.0f).w * 2.0f - 1.0f);
			f += amplitude * (value * 2.0f - 1.0f) * normalizationFactorNoise3DTex;
		}
		sum += amplitude;

		amplitude *= 0.5f;
		//amplitude *= 1.0f/frequency;

		pos.xyz = (pos.xyz * rot);
		pos.xyz *= frequency;
		//frequency += 0.011f;
	}

	f /= sum;

	return f;
}
#endif

#ifndef FRAME_GROUP_SIZE
#define FRAME_GROUP_SIZE 1
#endif

#define USE_CORRECT_SCENE_DEPTH_ARTIFACTS 1
// We can't disable this because of delta distance of each pixel is very different
#define USE_FIXED_STEP_SIZE 1
#define USE_TEMPORAL_JITTER 1

uniform float3 VolumeMin;
uniform float3 VolumeSize;
uniform sampler2D SceneDepthTexture;
float3 WorldToSamplePos(float3 worldPos)
{
	return float3(worldPos - VolumeMin) / (VolumeSize);
}

uniform float4 ScatterFactor;
uniform float StepSize;

float3 GetLightEngry( float3 worldPos , float3 cameraDir )
{
	float3 lightColor = float3(0, 0, 0);
	for( int i = 0; i < TiledLightNum; ++i )
	{
		TiledLightInfo light = TiledLightList[i];
		float3 tracePosToLight = light.pos.xyz - worldPos;
		float LightDist = length(tracePosToLight);
		float LoV = dot(cameraDir, tracePosToLight / LightDist);

#if 0
		float phase = PhaseFunction_HG(LoV, ScatterFactor.y);
#else
		float phase = PhaseFunction_Schlick(LoV, ScatterFactor.y);
#endif
		phase += PhaseFunction_Mei(LoV);
		phase *= 0.5;

		float attenuation = CalcRaidalAttenuation(LightDist, 1.0 / light.radius);
		lightColor += phase * light.color * light.intensity *attenuation;
	}


	return lightColor;
}

float GetStepSize( float indexStep , float stepNum , float distStart , float distDelta )
{
	float t = rcp(stepNum);
	return distStart + distDelta * pow(saturate(indexStep * t), 2);
}

float GetJitter(float2 pixelCoord, float2 temporalJitter)
{
	float2 n = pixelCoord.xy + temporalJitter.xy;
	float3 magic = { 0.06711056f, 0.00583715f, 52.9829189f };
	float jitter = frac(magic.z * frac(dot(n.xy, magic.xy)));
	return jitter;
}

layout(location = 1) out float OutDepth;
void SmokeRenderPS()
{
	float2 screenUV = VSOutput.UVs;


	float4 temp = View.clipToWorld * float4(2 * screenUV - 1, 1, 1);
	float3 cameraDir = normalize(temp.xyz / temp.w - View.worldPos);

	float2 intersection;
	if( !RayAABBTest(View.worldPos, cameraDir, VolumeMin, VolumeMin + VolumeSize, intersection) )
	{
		OutColor = float4(0, 0, 0, 1);
		return;
	}

	float2 pixelPos = screenUV / View.rectPosAndSizeInv.zw - float2(0.5, 0.5);

#if USE_TEMPORAL_JITTER
	const float jitter = GetJitter(pixelPos, (View.frameCount.xx) % 1024);
#else
	const float jitter = 0;
#endif

	float deviceDepth = texture(SceneDepthTexture, screenUV).x;
	float sceneDepth = BufferDepthToSceneDepth(deviceDepth);

#if 1
	float distDepth = sceneDepth / dot(View.direction, cameraDir);
#else
	float3 worldPos = StoreWorldPos(screenUV, deviceDepth);
	float distDepth = length(worldPos - View.worldPos);

	//OutColor = float4(worldPos / 10, 0.0);
#endif

	float3 worldPosDepth = View.worldPos + sceneDepth * cameraDir;
	//distDepth = 1000000;

	float distStart = max(0, intersection.x);
	float distEnd = max( distStart , intersection.y );
	distEnd = min(distDepth, distEnd);

	const float distDelta = distEnd - distStart;
#if 0
	float stepNum = distDelta / StepSize + 1;
	//Note : don't floor step size
	float fixedStepSize = distDelta / ( stepNum );
#else
	float stepNum = floor( distDelta / StepSize ) + 1;
	float fixedStepSize = StepSize;
#endif

	if( distDepth < distStart )
	{
		stepNum = 0;
	}

	const float scatterCoefficient = ScatterFactor.z;
	const float extinctionCoefficient = ScatterFactor.w;

	
	float3 inScatter = float3(0,0,0);
	float opticalThinkness = 0;
	float transmittance = 1;

	float indexStep = 0;
	for( ; indexStep < stepNum; ++indexStep )
	{
		if( transmittance < 0.001 )
		{
			break;
		}
#if USE_FIXED_STEP_SIZE
		float distCurrent = distStart + ( indexStep + jitter ) * fixedStepSize;
#else
		float distCurrent = GetStepSize(indexStep + jitter , stepNum, distStart, distDelta);
#endif
		if ( distCurrent > distEnd )
			break;
		float3 tracePos = View.worldPos + distCurrent * cameraDir;
		float3 samplePos = WorldToSamplePos(tracePos);

		float density =  pow( texture3D(VolumeTexture, samplePos).x , 2 );

		if( density > 0 )
		{

#if USE_FIXED_STEP_SIZE
#if USE_CORRECT_SCENE_DEPTH_ARTIFACTS
			float distNext = min(distStart + (indexStep + jitter + 1) * fixedStepSize , distDepth);
			float stepSize = distNext - distCurrent;
#else
			float stepSize = fixedStepSize;
#endif
#else
			float distNext = min(GetStepSize(indexStep + jitter + 1, stepNum, distStart, distDelta), distDepth);
			float stepSize = distNext - distCurrent;
#endif
			const float omega = 0.03;
			const float amplitude = ( tracePos.z - VolumeMin.z ) * 10;
			const float3 offset = 0.01 * float3(amplitude * 2 * sin(omega * 3 * Time), amplitude * cos(omega * 7 * Time), -10 * Time);
			density *= ScatterFactor.x * GetFBM(0.03 * ( tracePos + offset) , 3, 2, true);
	
			float3 lightColor = GetLightEngry( tracePos , cameraDir );

			opticalThinkness += extinctionCoefficient * density * stepSize;
			lightColor *= scatterCoefficient * density;
#if 1
			float muE = max(0.000000001f, extinctionCoefficient * density);
			float trns = exp(-muE * stepSize);
			// integral{ L + step , L }( exp(-kx) ) dx = exp(-kL) / ( -k ) * ( exp(-k * step ) - 1 ) 
			float3 sint = ((-lightColor * trns) + lightColor) / muE;// integral of attenuated inscattering within voxel
#else
			float3 sint = lightColor * stepSize;
			float trns = exp(-extinctionCoefficient * density * stepSize);
#endif
			inScatter += transmittance * sint;
			transmittance *= trns;
		}
	}

	OutColor = float4(inScatter, transmittance);
	OutDepth = (stepNum > 0) ? distStart : 0;
	//OutColor = float4(worldPosDepth, 1);
	//OutColor = float4(stepNum.xxx / 100 , 0);
	//OutColor = float4(IndexStep.xxx / 300 , 0);
}

uniform sampler2D FrameTexture;
uniform sampler2D HistroyTexture;
uniform sampler2D DepthTexture;

#define USE_REPROJECTION 0
void SmokeBlendPS()
{
	float2 screenUV = VSOutput.UVs;

	float4 frameColor = texture(FrameTexture, screenUV);

	float weight = 1;
#if USE_REPROJECTION
	float4 temp = View.clipToWorld * float4(2 * screenUV - 1, 1, 1);
	float3 cameraDir = normalize(temp.xyz / temp.w - View.worldPos);
	float depthDist = texture(DepthTexture, screenUV).r;
	weight = (depthDist == 0) ? 1 : weight;
	float3 worldPos = View.worldPos + depthDist * cameraDir;
	float4 clipPrev = View.worldToClipPrev * float4( worldPos , 1 );
	float2 screenUVPrev = 0.5 *(clipPrev.xy / clipPrev.w + float2(1, 1));
	float4 historyColor = texture(HistroyTexture, screenUVPrev);

	if( any( greaterThan(float2(0, 0)  , screenUVPrev) ) || any(greaterThan(screenUVPrev, float2(1, 1) ) ) )
	{
		weight = 1;
	}
#else
	float4 historyColor = texture(HistroyTexture, screenUV);
#endif

	OutColor = lerp( historyColor , frameColor , weight );
	//OutColor.a = frameColor.a;
	//OutColor = float4(abs(screenUV -screenUVPrev), 0, 0);
	//OutColor = historyColor;
	//OutColor = float4(worldPos, 0.5 );
	//OutColor = float4(depthDist / 1000, 0 , 0, 0);

}

#endif

