#include "VertexFactoryProcess.sgc"
#include "MaterialProcess.sgc"

#include "DeferredShadingCommon.sgc"
#include "ViewParam.sgc"

#ifndef FORWARD_SHADING
#define FORWARD_SHADING 0
#endif //FORWARD_SHADING


struct PassInterpolantsParam
{
	float dump;
};

struct VertexOutputParamVSToPS
{
	FactoryInterpolantsParam   factoryInterpolants;
	PassInterpolantsParam      passInterpolants;
};

#if VERTEX_SHADER

layout(location = 0) out VertexOutputParameters OutputVS;
void BassPassVS()
{
	VertexFactoryIntermediatesVS intermediates = VertexFactory_GetIntermediatesVS();

	MaterialInputVS materialInput = InitMaterialInputVS();
	MaterialParametersVS materialParameters = VertexFactory_GetMaterialParameterVS( intermediates );

	CalcMaterialInputVS( materialInput , materialParameters );

	gl_Position = VertexFactory_GetInterpolants(OutputVS.factoryInterpolants , intermediates , materialInput , materialParameters );
	//gl_Position = ftransform();
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

layout(location = 0) in VertexOutputParamVSToPS InputPS;
void BasePassPS()
{

	MaterialInputPS materialInput = InitMaterialInputPS();
	MaterialParametersPS materialParameters = VertexFactory_GetMaterialParameterPS(InputPS.factoryInterpolants);

	CalcMaterialParameters(materialInput , materialParameters);

	//float4 color = float4( materialParameters.vectexColor * 0.1 , 1 );
	float4 color = float4(0.0);
	color.rgb += materialInput.emissiveColor;
	color.a = 1.0;


	GBufferData GBuffer;
	GBuffer.worldPos = GetMaterialWorldPositionAndCheckDepthOffset(materialInput, materialParameters);
	//GBuffer.normal = normalize(vsOutput.normal.xyz);
	GBuffer.normal = GetMaterialWorldNormal(materialInput , materialParameters);
	//GBuffer.normal = materialParameters.worldNormal;

	GBuffer.baseColor = materialInput.baseColor;
	GBuffer.metallic = materialInput.metallic;
	GBuffer.roughness = materialInput.roughness;
	GBuffer.specular = materialInput.specular;
	GBuffer.shadingModel = materialInput.shadingModel;
	float4 clipPos = View.worldToClip * float4(materialParameters.worldPos, 1);
	clipPos = materialParameters.clipPos;
	GBuffer.sceneDepth = materialParameters.NDC.z;

#if FORWARD_SHADING
	gl_FragData[0] = float4( GBuffer.baseColor , 1 );
#else
	float4 GBufferA, GBufferB, GBufferC, GBufferD;
	EncodeGBuffer(GBuffer, GBufferA, GBufferB, GBufferC, GBufferD);
	gl_FragData[0] = color;
	gl_FragData[1] = GBufferA;
	gl_FragData[2] = GBufferB;
	gl_FragData[3] = GBufferC;
	gl_FragData[4] = GBufferD;
#endif
}


#endif //PIXEL_SHADER
