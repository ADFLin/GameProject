#include "Common.sgc"
#include "PrimitiveParam.sgc"
#include "ViewParam.sgc"
#include "LightingCommon.sgc"
#include "IBLCommon.sgc"

struct VSOutputParameters
{
	float3 worldPos MEMBER_OUTPUT(TEXCOORD0);
	float3 normal   MEMBER_OUTPUT(TEXCOORD1);
	float4 tangent  MEMBER_OUTPUT(TEXCOORD2);
	float2 UVs      MEMBER_OUTPUT(TEXCOORD3);
};


#if VERTEX_SHADER

VS_ENTRY_START(MainVS)
	VS_INPUT(float4 Position, ATTRIBUTE_POSITION)
	VS_INPUT(float3 Normal, ATTRIBUTE_NORMAL)
	//VS_INPUT(float4 Color, ATTRIBUTE_COLOR)
	VS_INPUT(float4 Tangent, ATTRIBUTE_TANGENT)
	VS_INPUT(float2 TexCoord0, ATTRIBUTE_TEXCOORD)
	VS_OUTPUT_STRUCT(VSOutputParameters VSOutput, 0)
VS_ENTRY_END(MainVS)
{
	VSOutput.worldPos = ( /*Primitive.localToWorld * */float4(Position.xyz , 1 ) ).xyz;
	VSOutput.normal   = /*float3x3(Primitive.localToWorld) **/ Normal;
	VSOutput.tangent = Tangent;
	VSOutput.UVs = TexCoord0;
	SvPosition = mul( View.worldToClip , float4(VSOutput.worldPos, 1) );
}

#endif

#if PIXEL_SHADER

DEFINE_TEXTURE(Texture2D, DiffuseTexture );
DEFINE_TEXTURE(Texture2D, NormalTexture );
DEFINE_TEXTURE(Texture2D, MetalTexture );
DEFINE_TEXTURE(Texture2D, RoughnessTexture );
uniform float SkyLightInstensity = 1.0;

PS_ENTRY_START(MainPS)
	PS_INPUT_STRUCT( VSOutputParameters VSOutput , 0 )
    PS_OUTPUT( float4 OutColor , 0 )
PS_ENTRY_END(MainPS)
{
	float2 uv = VSOutput.UVs;

	float3 worldNormal = normalize(VSOutput.normal.xyz);

	float3 tangentX = normalize(VSOutput.tangent.xyz);
	tangentX = normalize(tangentX - dot(tangentX, worldNormal) * worldNormal);
	float3 tangentZ = VSOutput.normal;
	float normalYSign = sign(VSOutput.tangent.w);
	float3 tangentY = normalYSign * cross(tangentZ, tangentX);
	float3x3 tangentToWorld = float3x3(tangentX, tangentY, tangentZ);
#if COMPILER_HLSL
	tangentToWorld = transpose(tangentToWorld);
#endif
	float3 baseColor = TEXTURE_SAMPLE(DiffuseTexture, uv).xyz;
	
	float  metallic = TEXTURE_SAMPLE(MetalTexture, uv).r;

	float  roughnessF = TEXTURE_SAMPLE(RoughnessTexture, uv).r;
	//metallic = pow(metallic, float(1 / 2.2));
	//roughnessF = 0.01;
	float3 normal = TEXTURE_SAMPLE(NormalTexture, uv).xyz;

	float3 N = mul( tangentToWorld , (2 * TEXTURE_SAMPLE(NormalTexture, uv).xyz - 1));
	//N = tangentZ;
	float3 V = normalize(View.worldPos - VSOutput.worldPos);
	float3 L = normalize(float3(1, 1, 2));
	float3 R = reflect(-V, N);
	float specular = 0.5;
	float NoV = saturate(dot(N, V));
	float NoL = saturate(dot(N, L));

	float3 diffuseColor = baseColor * (1 - metallic);
	float3 specularColor = lerp(float(0.08 * specular).xxx, baseColor, metallic);

	float3 roughness = float3(roughnessF, roughnessF, 1);
	roughness = max(roughness, 0.04);

	float3 shading = StandardShading(diffuseColor, specularColor, roughness, float3(1,1,1), L, V, N);

	float3 radiance = 0.0 * float3(5, 2, 1);

	float3 envSpecular = GetIBLSpecularColor(specularColor, R, NoV, roughnessF);
	float3 ambient = SkyLightInstensity * ( 0 * GetIrradianceColor(N) * baseColor + envSpecular);

	float3 color = radiance * NoL * shading + ambient;
	//color = pow(color, float3(1. / 2.2));
	
	OutColor = float4(NoV.xxx, 1);
	OutColor = float4(uv, 0, 1);
	OutColor = float4(color, 1);
	//OutColor = float4(N*float3(1,-1,1), 1);
	//OutColor = float4(normal, 1);
}

#endif