#pragma once
#include "Common.sgc"
#include "ViewParam.sgc"

#ifndef USE_PERSPECTIVE_DEPTH
#define USE_PERSPECTIVE_DEPTH 1
#endif

#ifndef USE_CASCADE_TEXTURE_ARRAY
#define USE_CASCADE_TEXTURE_ARRAY 0
#endif

DEFINE_TEXTURE(TextureCube,  ShadowTextureCube);
DEFINE_TEXTURE(Texture2D, ShadowTexture2D);

uniform float2 DepthParam;
uniform float2 ShadowParam;
uniform float ShadowBias = 0.1;
uniform float ShadowFactor = 1;

uniform int NumCascade = 0;

uniform float CacadeDepth[8];

#if USE_CASCADE_TEXTURE_ARRAY 
uniform sampler2D ShadowCascadeTexture2D[8];
#else
uniform sampler2D ShadowCascadeTexture2D;
#endif

float ShadowCmp(float s, float depth , float a, float b)
{
#if USE_INVERSE_ZBUFFER
	return s <= depth ? a : b;
#else
	return s >= depth ? a : b;
#endif
}

float GetShadowProjectDepth(float4 shadowPos)
{
#if USE_INVERSE_ZBUFFER
	return NDCToBufferDepth((shadowPos.z + 0.001) / shadowPos.w);
#else
	return NDCToBufferDepth((shadowPos.z - 0.001) / shadowPos.w);
#endif
}

int GetCubeFace(float3 lightVector)
{
	float3 lightVectorAbs = abs(lightVector);
	float maxValue = max(lightVectorAbs.x, max(lightVectorAbs.y, lightVectorAbs.z));
	int result;
	if( lightVectorAbs.x == maxValue )
	{
		result = (lightVector.x > 0.0) ? 0 : 1;
	}
	else if( lightVectorAbs.y == maxValue )
	{
		result = (lightVector.y > 0.0) ? 2 : 3;
	}
	else //if( lightVectorAbs.x == maxValue )
	{
		result = (lightVector.z > 0.0) ? 4 : 5;
	}
	return result;
}

GLOBAL_CONST float3 sampleOffsetDirections[20] =
{
	float3(1.0, 1.0, 1.0), float3(1.0, -1.0, 1.0), float3(-1.0, -1.0, 1.0), float3(-1.0, 1.0, 1.0),
	float3(1.0, 1.0,-1.0), float3(1.0, -1.0, -1.0), float3(-1.0, -1.0, -1.0), float3(-1.0, 1.0, -1.0),
	float3(1.0, 1.0, 0.0), float3(1.0, -1.0, 0.0), float3(-1.0, -1.0, 0.0), float3(-1.0, 1.0, 0.0),
	float3(1.0, 0.0, 1.0), float3(-1.0, 0.0, 1.0), float3(1.0, 0.0, -1.0), float3(-1.0, 0.0, -1.0),
	float3(0.0, 1.0, 1.0), float3(0.0, -1.0, 1.0), float3(0.0, -1.0, -1.0), float3(0.0, 1.0, -1.0)
};

float3 CalcPointLightShadow( float3 worldPos , mat4 shadowMatrix[8] , float3 lightVector )
{
	const float factor = 0;
#if 0
	
	float dist = length(lightVector);
	float3 lightVector = lightVector / dist;
	float testOffset = ShadowFactor * dist - ShadowBias;
	float depth = (testOffset - DepthParam.x) / (DepthParam.y - DepthParam.x);
	if( depth > 1.0 )
		return factor;
	if( texCUBE(ShadowTextureCube, lightVector).r < depth )
		return factor;
	return 1.0;
#else
	float viewDist = length( mul( View.worldToView , float4(worldPos,1) ) );
	//viewDist = length(lightVector);
	float zfar = 1000;
	float diskRadius = (1.0 + (viewDist / zfar)) / 50.0;
	uint idxFace = GetCubeFace(lightVector);

	float4 shadowPos = mul( shadowMatrix[idxFace] , float4(worldPos, 1) );
#if USE_PERSPECTIVE_DEPTH
	float depth = shadowPos.z / shadowPos.w - 0.0002;/*+ 0.01 / shadowPos.w*/;
#else
	float depth = shadowPos.z * ShadowParam.y - 0.005;
#endif
	float shadow = 0;//(texCUBE(ShadowTextureCube, lightVector).r >= depth) ? 1 : factor;
#if 0
	const int numSample = 20;
	for( int i = 0; i < numSample; ++i )
	{
		float3 dir = lightVector + diskRadius * sampleOffsetDirections[i];
		shadow += (texture(ShadowTextureCube, dir).r >= depth) ? 1 : factor;
	}
	shadow /= float(numSample);
#else
	shadow += (TEXTURE_SAMPLE(ShadowTextureCube, lightVector).r >= depth) ? 1 : factor;
#endif
	//shadow = 0.5 * (shadowPos.z + 1);
#endif
	return shadow.xxx;
}

#if COMPILER_HLSL
float3 SimplePCF(Texture2D shadowTexture , SamplerState shadowTextureSampler , float2 shadowUV, float depth)
#else
float3 SimplePCF(Texture2D shadowTexture, float2 shadowUV, float depth)
#endif
{
	const float factor = 0;
	float count = 0;

	float2 texSize;
#if COMPILER_HLSL
	shadowTexture.GetDimensions(texSize.x, texSize.y);
#else
	texSize = float2(textureSize(shadowTexture, 0));
#endif
	float2 dUV = 1.0 / texSize;
	//dUV.x /= NumCascade;
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV).r, depth, 1.0, factor);
#if 1
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV + float2(dUV.x, 0.0)).r, depth, 1.0, factor);
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV - float2(dUV.x, 0.0)).r, depth, 1.0, factor);
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV + float2(0.0, dUV.y)).r, depth, 1.0, factor);
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV - float2(0.0, dUV.y)).r, depth, 1.0, factor);
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV + dUV).r, depth, 1.0 , factor);
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV - dUV).r, depth, 1.0 , factor);
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV + float2(-dUV.x, dUV.y)).r, depth, 1.0, factor);
	count += ShadowCmp(TEXTURE_SAMPLE(shadowTexture, shadowUV + float2(dUV.x, -dUV.y)).r, depth, 1.0, factor);
	float shadow = count / 9.0;
#else
	float shadow = count;
#endif
	return shadow.xxx;
}

float3 CalcSpotLightShadow(float3 worldPos, float4x4 shadowMatrix)
{
	float4 shadowPos = mul( shadowMatrix , float4(worldPos, 1.0) );

	float depth = GetShadowProjectDepth(shadowPos);
	float2 shadowUV = VFLIP( shadowPos.xy / shadowPos.w );

#if COMPILER_HLSL
	float3 shadow = SimplePCF( ShadowTexture2D, TEXTURE_SAMPLER_NAME(ShadowTexture2D), shadowUV , depth );
#else
	float3 shadow = SimplePCF(ShadowTexture2D, shadowUV, depth);
#endif

	//return float3(shadowUV, 0);
	return shadow;
}

#if USE_CASCADE_TEXTURE_ARRAY 
float3 CalcDirectionalLightShadowInternal(float3 worldPos, float4x4 shadowMatrix)
#else
float3 CalcDirectionalLightShadowInternal(float3 worldPos, float4x4 shadowMatrix)
#endif
{
	//return 1;
	const float factor = 0.0;
	float4 shadowPos = mul( shadowMatrix , float4(worldPos, 1.0) );
#if USE_PERSPECTIVE_DEPTH
	float depth = shadowPos.z / shadowPos.w - 0.004;
#else
	float depth = shadowPos.z * ShadowParam.y - 0.001;
#endif
	float2 shadowUV = shadowPos.xy / shadowPos.w;

	//return float3(shadowUV.xy,0);

#if 1
	if( shadowUV.x <= 0.0 )
		return float3(1.0, 1.0, 1.0);
	if( shadowUV.y <= 0.0 )
		return float3(1.0, 1.0, 1.0);
	if( shadowUV.x >= 1.0 )
		return float3(1.0, 1.0, 1.0);
	if( shadowUV.y >= 1.0 )
		return float3(1.0, 1.0, 1.0);
#endif

#if COMPILER_HLSL
	float3 shadow = SimplePCF(ShadowTexture2D , ShadowTexture2DSampler , shadowUV, depth);
#else
	float3 shadow = SimplePCF(ShadowTexture2D, shadowUV, depth);
#endif
	return shadow;
}

GLOBAL_CONST float3 debugColor[8] = 
{
	float3(1.0,0.0,0.0),
	float3(0.0,1.0,0.0),
	float3(0.0,0.0,1.0),
	float3(1.0,1.0,0.0),
	float3(1.0,0.0,1.0),
	float3(0.0,1.0,1.0),
	float3(0.5,0.5,1.0),
	float3(0.5,1.0,0.5)
};

float3 CalcDirectionalLightShadow(float3 worldPos, float4x4 shadowMatrix[8])
{
	float4 viewPos = mul( View.worldToView , float4(worldPos, 1.0) );

	float3 result = float3(1,1,1);
	//return -viewPos.z / 100;
	for( int i = 0; i < NumCascade; ++i )
	{
		if( viewPos.z > CacadeDepth[i] )
		{
			result = CalcDirectionalLightShadowInternal(worldPos, shadowMatrix[i]);
			//result *= debugColor[i];
			break;
		}
	}
	return result;
}


//float CalcShadowDepth( )