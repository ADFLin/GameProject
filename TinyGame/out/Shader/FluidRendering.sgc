#include "Common.sgc"
#include "ViewParam.sgc"
#include "ScreenVertexShader.sgc"
#include "LightingCommon.sgc"

#ifndef DRAW_THICKNESS
#define DRAW_THICKNESS 0
#endif

struct ParticleData
{
	float3 pos;
};
DEFINE_STRUCTURED_BUFFER(ParticleData, Particles);

struct BassPassOutputVS
{
	float2  offset     MEMBER_OUT(TEXCOORD0);
};

uniform float RenderRadius;
#if SHADER_ENTRY(BasePassVS)

VS_ENTRY_START(BasePassVS)
	VS_INPUT(float2 InPos, ATTRIBUTE_POSITION)
	//VS_INPUT(float2 IUV, ATTRIBUTE_TEXCOORD)
	VS_OUTPUT_STRUCT(BassPassOutputVS OutputVS, 0)
	VS_OUTPUT(flat float3 OutPos, 1)
	VS_INPUT_INSTANCEID
VS_ENTRY_END(BasePassVS)
{
	float3 posView = mul(View.worldToView, float4(Particles[SvInstanceID].pos, 1.0) ).xyz;

	OutputVS.offset = InPos;
	OutPos = posView;
	SvPosition = mul(View.viewToClip, float4(posView + RenderRadius * float3(InPos, -1), 1));
}


#endif

#if SHADER_ENTRY(BasePassPS)

//PS_EARLY_DEPTH_TEST
PS_ENTRY_START(BasePassPS)
	PS_INPUT_STRUCT(BassPassOutputVS OutputVS, 0)
	PS_INPUT(flat float3 InPos, 1)
	PS_OUTPUT(float4 OutColor, 0)
#if !DRAW_THICKNESS
	//out float SvDepth : SV_DepthGreaterEqual,
	PS_OUTPUT_DEPTH
#endif
PS_ENTRY_END(BasePassPS)
{
	float r2 = dot(OutputVS.offset, OutputVS.offset);
	clip(1 - r2);

	float3 N;
	N.xy = OutputVS.offset;
	N.z = -sqrt(1.0 - r2);
	float3 viewPos = InPos + N * RenderRadius;

#if DRAW_THICKNESS
	float v = 0.0001;
	OutColor = float4(v, v, v, 1);
#else
	float4 NDC = mul(View.viewToClip, float4(viewPos, 1));
	float depth = viewPos.z;
	//depth = NDC.z / NDC.w;
	//OutColor = float4(0.5 * N + 0.5, 1);
	OutColor = float4(depth, depth, depth, 1.0);
	SvDepth = NDC.z / NDC.w;
#endif
}

#endif

#if SHADER_ENTRY(FilterPS)

uniform float FilterRadius;
uniform float4 BlurParams;

DEFINE_TEXTURE(Texture2D, DepthTexture)

PS_ENTRY_START(FilterPS)
	PS_INPUT_STRUCT(VSOutputParameters OutputVS, 0)
	PS_OUTPUT(float4 OutColor, 0)
PS_ENTRY_END(FilterPS)
{
	float depth = TEXTURE_SAMPLE(DepthTexture, OutputVS.UVs);
	if (depth == 0)
		discard;

	float sum = 0;
	float weightSum = 0;

	for (float x = -FilterRadius; x <= FilterRadius; x += 1.0)
	{
		float sample = TEXTURE_SAMPLE(DepthTexture, OutputVS.UVs + x * BlurParams.xy).x;
		
		float r = x * BlurParams.z;
		float w = (sample == 0) ? 0 : exp(-r*r);

		float r2 = (sample - depth) * BlurParams.w;
		float g = exp(-r2 * r2);
		//g = 1.0;

		sum += sample * w * g;
		weightSum += w * g;
	}

	if (weightSum > 0.0)
	{
		sum /= weightSum;
	}

	OutColor = float4( sum , sum , sum , 1.0f);
	//OutColor = float4(1,1,0,1);
}

#endif


#if SHADER_ENTRY(RenderPS)


DEFINE_TEXTURE(Texture2D, DepthTexture)
DEFINE_TEXTURE(Texture2D, ThicknessTexture)



float3 GetViewPos(float2 uv)
{
	float depth = TEXTURE_SAMPLE(DepthTexture, uv);
	return StoreViewPos(uv, SceneDepthToNDCDepth(View.viewToClip, depth));
}

PS_ENTRY_START(RenderPS)
	PS_INPUT_STRUCT(VSOutputParameters OutputVS, 0)
	PS_OUTPUT(float4 OutColor, 0)
	PS_OUTPUT_DEPTH
PS_ENTRY_END(RenderPS)
{

	float depth = TEXTURE_SAMPLE(DepthTexture, OutputVS.UVs);
	if ( depth == 0)
		discard;

	uint2 texSize = TextureSize(DepthTexture);
	float2 texelSize = 1.0 / texSize;

	float d = TEXTURE_SAMPLE(ThicknessTexture, OutputVS.UVs);
	float3 worldPos = StoreWorldPos(OutputVS.UVs, SceneDepthToNDCDepth(View.viewToClip, depth));

#if 0

	float3 dx = ddx(worldPos);
	float3 dy = ddy(worldPos);
	float3 N = normalize( cross(dx ,dy) );
#else

	float3 viewPos = StoreViewPos(OutputVS.UVs, SceneDepthToNDCDepth(View.viewToClip, depth));
	float3 DDX = GetViewPos(OutputVS.UVs + float2(texelSize.x, 0)) - viewPos;
	float3 DDX2 = viewPos - GetViewPos(OutputVS.UVs - float2(texelSize.x, 0));
	if (abs(DDX.z) > abs(DDX2.z))
	{
		DDX = DDX2;
	}
	float3 DDY = GetViewPos(OutputVS.UVs + float2(0, texelSize.y)) - viewPos;
	float3 DDY2 = viewPos - GetViewPos(OutputVS.UVs - float2(0, texelSize.y));
	if (abs(DDY.z) > abs(DDY2.z))
	{
		DDY = DDY2;
	}

	float3 N = normalize( mul((float3x3)View.viewToWorld, cross(DDX, DDY)) );
#endif

	float3 L = normalize(float3(-0.2,0.2,1));
	float3 V = normalize(View.worldPos - worldPos);
	float3 H = normalize(V + L);
	float NoL = dot(N,L);
	float NoV = dot(N,V);
	float NoH = saturate(dot(N,H));

	float3 diffuse = ( NoL * 0.5 + 0.5 ).xxx;
	float3 spec = F_Schlick2(0.2 * float3(1,1,1) , NoV);

	float alpha = 40 * d;
	float3 Kd = float3(20,20,0.0001);
	float3 c = exp(-Kd * d);
	OutColor = float4(0.5 *N + 0.5, 1.0);
	//OutColor = float4(worldPos, 1.0);
	OutColor = float4(0.5 * c * diffuse + spec , alpha);
	SvDepth = depth;
}

#endif