#pragma once
#include "Common.sgc"

struct ViewParameters
{
	float4x4 worldToView;
	float4x4 worldToClip;
	float4x4 viewToWorld;
	float4x4 viewToClip;
	float4x4 clipToView;
	float4x4 clipToWorld;
	float4x4 translatedWorldToClip;
	float4x4 clipToTranslatedWorld;
	float4x4 worldToClipPrev;

	float4    frustumPlanes[6];

	float4 rectPosAndSizeInv;
	float3 worldPos;
	float  realTime;

	float3 direction;
	float  gameTime;

	int    frameCount;

};


#if SHADER_COMPILING
layout(std140) cbuffer ViewBlock
{
	ViewParameters View;
};
#else
uniform ViewParameters View;
#endif

float BufferDepthToSceneDepth(mat4 viewToClip , float depth)
{
#if COMPILER_HLSL
	return viewToClip[2][3] / (BufferToNDCDepth(depth) + viewToClip[2][2]);
#else
	return viewToClip[3][2] / (BufferToNDCDepth(depth) + viewToClip[2][2]);
#endif
}

float BufferDepthToSceneDepth(float depth)
{
	return BufferDepthToSceneDepth(View.viewToClip, depth);
}

DEFINE_TEXTURE( Texture2D , FrameDepthTexture );


float2 ScreenUVToBufferUV(float2 screenUV)
{
	return screenUV/* + View.rectPosAndSizeInv.xy * View.rectPosAndSizeInv.zw*/;
}
float2 BufferUVToScreenUV(float2 bufferUV)
{
	return bufferUV/* - View.rectPosAndSizeInv.xy * View.rectPosAndSizeInv.zw*/;
}

float ScreenUVToSceneDepth(float2 screenUV)
{
	float depth = TEXTURE_SAMPLE(FrameDepthTexture, ScreenUVToBufferUV(screenUV)).r;
	return BufferDepthToSceneDepth(depth);
}

float3 NDCToWorldPos(float4 NDC)
{
	float4 pos = mul(View.clipToWorld, NDC);
	return pos.xyz / pos.w;
}

float3 StoreWorldPos(float2 screenUV, float bufferDepth)
{
	float2 screenPos = (2.0 * VFLIP(screenUV) - 1.0);
	float4 NDC = float4(screenPos, BufferToNDCDepth( bufferDepth ), 1);
	return NDCToWorldPos(NDC);
}


float3 ScreenUVToWorldPos(float2 screenUV)
{
	return StoreWorldPos(screenUV, TEXTURE_SAMPLE(FrameDepthTexture, ScreenUVToBufferUV(screenUV)).r);
}


float4 SvPositionToNDC(float4 svPosition)
{
	float2 screenUV = (svPosition.xy - View.rectPosAndSizeInv.xy) * View.rectPosAndSizeInv.zw;
	return float4(screenUV, svPosition.z, 1);
}
