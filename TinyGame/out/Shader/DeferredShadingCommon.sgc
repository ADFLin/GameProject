#pragma once

#include "Common.sgc"
#include "ViewParam.sgc"

DEFINE_TEXTURE(Texture2D, GBufferTextureA);
DEFINE_TEXTURE(Texture2D, GBufferTextureB);
DEFINE_TEXTURE(Texture2D, GBufferTextureC);
DEFINE_TEXTURE(Texture2D, GBufferTextureD);

struct GBufferData
{
	float3 worldPos;
	float3 normal;
	float3 baseColor;

	float metallic;
	float specular;
	float roughness;
	uint  shadingModel;
	
	float3 diffuseColor;
	float3 specularColor;
	float  sceneDepth;
};


float3 GetGBufferNormal(float2 UVs)
{
	return TEXTURE_SAMPLE(GBufferTextureB, UVs).xyz;
}

float3 EncodeNormal(float3 value)
{
	// [-1 1] -> [0 , 1]
	return 0.5 * value + 0.5;
}

float3 DecodeNormal(float3 value)
{
	return 2 * value - 1;
}

uint DecodeShadingModel(float value)
{
	return (uint(round(value * float(0xff)))) & 0xff;
}

float EncodeShadingModel(uint value)
{
	return float(value) / float(0xff);
}

void EncodeGBuffer(in GBufferData GBuffer ,
				   out float4 GBufferA,
				   out float4 GBufferB,
				   out float4 GBufferC,
				   out float4 GBufferD)
{
	GBufferA = float4(EncodeNormal(GBuffer.normal), 1);
	GBufferB = float4(GBuffer.baseColor, 1);

	GBufferC.r = GBuffer.metallic;
	GBufferC.g = GBuffer.roughness;
	GBufferC.b = GBuffer.specular;
	GBufferC.a = EncodeShadingModel(GBuffer.shadingModel);

	GBufferD = float4(GBuffer.worldPos, 1);
}

GBufferData DecodeGBuffer(in float4 GBufferA, in float4 GBufferB, in float4 GBufferC , in float4 GBufferD , float2 ScreenUV )
{
	float bufferDepth = TEXTURE_SAMPLE(FrameDepthTexture, ScreenUVToBufferUV(ScreenUV)).x;

	GBufferData GBuffer;
#if 1
	GBuffer.worldPos = StoreWorldPos(ScreenUV, bufferDepth);
#else
	GBuffer.worldPos = GBufferD.xyz;
#endif
	GBuffer.normal = DecodeNormal( GBufferA.rgb );
	//GBuffer.worldPos = GBufferD.rgb;
	GBuffer.baseColor = GBufferB.rgb;

	GBuffer.metallic = GBufferC.r;
	GBuffer.roughness = GBufferC.g;
	GBuffer.specular = GBufferC.b;
	GBuffer.shadingModel = DecodeShadingModel(GBufferC.a);
	GBuffer.specularColor = lerp( float(0.08 *GBuffer.specular).xxx , GBuffer.baseColor, GBuffer.metallic);
	GBuffer.diffuseColor = GBuffer.baseColor - GBuffer.baseColor * GBuffer.metallic;
	GBuffer.sceneDepth = BufferDepthToSceneDepth(bufferDepth);
	return GBuffer;
}

GBufferData GetGBufferData( in float2 ScreenUV)
{
	GBufferData data = DecodeGBuffer(
		TEXTURE_SAMPLE(GBufferTextureA, ScreenUV),
		TEXTURE_SAMPLE(GBufferTextureB, ScreenUV),
		TEXTURE_SAMPLE(GBufferTextureC, ScreenUV),
		TEXTURE_SAMPLE(GBufferTextureD, ScreenUV),
		ScreenUV );

	return data;
}