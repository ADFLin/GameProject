#pragma once
#include "Common.sgc"
#include "MaterialCommon.sgc"
#include "ViewParam.sgc"
#include "PrimitiveParam.sgc"

#ifndef USE_INSTANCED
#define USE_INSTANCED 0
#endif // !USE_INSTANCED

#ifndef VERTEX_FACTORY_USE_GEOMETRY_SHADER
#define VERTEX_FACTORY_USE_GEOMETRY_SHADER 0
#endif
#ifndef VERTEX_FACTORY_HAVE_TANGENT
#define VERTEX_FACTORY_HAVE_TANGENT 1
#endif
#define VETEX_FACTORY_USE_VERTEX_ATTRIBUTE 1

#if VERTEX_FACTORY_USE_GEOMETRY_SHADER

struct FactoryInterpolantsParam
{
	float3 worldPos;
	float3 worldNormal;
#if VERTEX_FACTORY_HAVE_TANGENT
	float4 tangent;
#endif
	float4 vertexColor;

	float4 debug;
#if MATERIAL_TEXCOORD_NUM
	float2 texCoords[MATERIAL_TEXCOORD_NUM];
#endif
};

#define VertexFactoryOutputVS VertexFactoryOutputVSToGS 
#define VertexFactoryIutputPS VertexFactoryOutputGSToPS 


#else //VERTEX_FACTORY_USE_GEOMETRY_SHADER
struct FactoryInterpolantsParam
{
	float3 worldNormal MEMBER_OUT(TEXCOORD1);
#if VERTEX_FACTORY_HAVE_TANGENT
	float4 tangent     MEMBER_OUT(TEXCOORD2);
#endif
	float4 vertexColor MEMBER_OUT(TEXCOORD3);

#if MATERIAL_TEXCOORD_NUM
	float2 texCoords[MATERIAL_TEXCOORD_NUM] MEMBER_OUT(TEXCOORD6);
#endif
};

#endif //VERTEX_FACTORY_USE_GEOMETRY_SHADER


#if VERTEX_SHADER

#if VETEX_FACTORY_USE_VERTEX_ATTRIBUTE


DECLARE_VERTEX_INPUT_START( VertexFactoryInputParameters )

	DECLARE_VERTEX_INPUT(float4, position ,ATTRIBUTE_POSITION)
	DECLARE_VERTEX_INPUT(float3, normal, ATTRIBUTE_NORMAL)
	DECLARE_VERTEX_INPUT(float4, color , ATTRIBUTE_COLOR)

#if USE_INSTANCED
	DECLARE_VERTEX_INPUT(float4, InstanceParam0, ATTRIBUTE4)
	DECLARE_VERTEX_INPUT(float4, InstanceParam1, ATTRIBUTE5)
	DECLARE_VERTEX_INPUT(float4, InstanceParam2, ATTRIBUTE6)
	DECLARE_VERTEX_INPUT(float4, InstanceParam3, ATTRIBUTE7)
#endif

#if VERTEX_FACTORY_HAVE_TANGENT
	DECLARE_VERTEX_INPUT(float4, tangent, ATTRIBUTE_TANGENT)
#endif

#if MATERIAL_TEXCOORD_NUM
	#if MATERIAL_TEXCOORD_NUM > 0
	DECLARE_VERTEX_INPUT(float2, texCoord0, ATTRIBUTE_TEXCOORD)
	#endif
	#if MATERIAL_TEXCOORD_NUM > 1
	DECLARE_VERTEX_INPUT(float2, texCoord1, ATTRIBUTE_TEXCOORD1)
	#endif
	#if MATERIAL_TEXCOORD_NUM > 2
	DECLARE_VERTEX_INPUT(float2, texCoord2, ATTRIBUTE_TEXCOORD2)
	#endif
	#if MATERIAL_TEXCOORD_NUM > 3
	DECLARE_VERTEX_INPUT(float2, texCoord3, ATTRIBUTE_TEXCOORD3)
	#endif
#endif//MATERIAL_TEXCOORD_NUM

DECLARE_VERTEX_INPUT_END( VertexFactoryInputParameters )

#endif //VETEX_FACTORY_USE_VERTEX_ATTRIBUTE

struct VertexFactoryIntermediatesVS
{
	float4 normal;
	float4 tangent;
	float4 vertexColor;
	uint   haveTangent;
};

float4x4 GetLocalToWorldTransform()
{
#if USE_INSTANCED
	float4x4 instanceTransform;
	instanceTransform[0] = float4(VERTEX_INPUT(InstanceParam0).xyz, 0);
	instanceTransform[1] = float4(VERTEX_INPUT(InstanceParam1).xyz, 0);
	instanceTransform[2] = float4(VERTEX_INPUT(InstanceParam2).xyz, 0);
	instanceTransform[3] = float4(VERTEX_INPUT(InstanceParam3).xyz, 1);
	return instanceTransform * Primitive.localToWorld;
#else
	return Primitive.localToWorld;
#endif
}

float4x4 GetWorldToLocalTransform()
{
#if USE_INSTANCED
	return inverse(GetLocalToWorldTransform());
#else
	return Primitive.worldToLocal;
#endif
}


VertexFactoryIntermediatesVS VertexFactory_GetIntermediatesVS( VERTEX_INPUT_PARAM(VertexFactoryInputParameters VertexInput) )
{
	VertexFactoryIntermediatesVS intermediates;
	float noramlFactor = 1;// gl_FrontFacing ? 1 : -1;

	float4x4 worldToLocal = GetWorldToLocalTransform();
	float4x4 localToWorld = GetLocalToWorldTransform();
	    

#if VETEX_FACTORY_USE_VERTEX_ATTRIBUTE
	// NormalMatrix = ( inverse( localToWorld ) )^t
	intermediates.normal = noramlFactor * mul( float4(VERTEX_INPUT(normal), 0) , worldToLocal );

#if VERTEX_FACTORY_HAVE_TANGENT
	intermediates.tangent = noramlFactor * mul( float4(VERTEX_INPUT(tangent).xyz, 0) , worldToLocal );
	intermediates.tangent.w = VERTEX_INPUT(tangent).w;
#endif
	intermediates.vertexColor = VERTEX_INPUT(color);
#else //USE_VERTEX_ATTRIBUTE_INDEX
	intermediates.normal = noramlFactor * float4(gl_Normal, 0) * Primitive.worldToLocal;

#if VERTEX_FACTORY_HAVE_TANGENT
	intermediates.tangent = noramlFactor * float4(gl_Tangent.xyz, 0) * Primitive.worldToLocal;
	intermediates.tangent.w = gl_Tangent.w;
#endif
	intermediates.vertexColor = gl_Color;
#endif //USE_VERTEX_ATTRIBUTE_INDEX

	return intermediates;
}



float4 VertexFactory_GetWorldPosition(
	VERTEX_INPUT_PARAM_COMMA(in VertexFactoryInputParameters VertexInput)
	in VertexFactoryIntermediatesVS intermediates )
{
	float4x4 localToWorld = GetLocalToWorldTransform();

	return mul( localToWorld  , float4( VERTEX_INPUT(position).xyz , 1 ) );
}

MaterialParametersVS VertexFactory_GetMaterialParameterVS(
	VERTEX_INPUT_PARAM_COMMA(in VertexFactoryInputParameters VertexInput)
	in VertexFactoryIntermediatesVS intermediates,
	float4 worldPos)
{
	MaterialParametersVS parameters;
	parameters.worldPos = worldPos.xyz;
	parameters.noraml = intermediates.normal.xyz;
	parameters.vectexColor = intermediates.vertexColor;

#if VETEX_FACTORY_USE_VERTEX_ATTRIBUTE
	parameters.vertexPos = VERTEX_INPUT(position);

#if MATERIAL_TEXCOORD_NUM > 0
	parameters.texCoords[0] = VERTEX_INPUT(texCoord0).xy;
#endif
#if MATERIAL_TEXCOORD_NUM > 1
	parameters.texCoords[1] = VERTEX_INPUT(texCoord1).xy;
#endif
#if MATERIAL_TEXCOORD_NUM > 2
	parameters.texCoords[2] = VERTEX_INPUT(texCoord2).xy;
#endif
#if MATERIAL_TEXCOORD_NUM > 3
	parameters.texCoords[3] = VERTEX_INPUT(texCoord3).xy;
#endif

#else //USE_VERTEX_ATTRIBUTE_INDEX
	parameters.vertexPos = gl_Vertex;

#if MATERIAL_TEXCOORD_NUM > 0
	parameters.texCoords[0] = gl_MultiTexCoord0.xy;
#endif
#if MATERIAL_TEXCOORD_NUM > 1
	parameters.texCoords[1] = gl_MultiTexCoord1.xy;
#endif
#if MATERIAL_TEXCOORD_NUM > 2
	parameters.texCoords[2] = gl_MultiTexCoord2.xy;
#endif
#if MATERIAL_TEXCOORD_NUM > 3
	parameters.texCoords[3] = gl_MultiTexCoord3.xy;
#endif

#endif //USE_VERTEX_ATTRIBUTE_INDEX

	return parameters;
}

FactoryInterpolantsParam VertexFactory_GetInterpolants(
	VERTEX_INPUT_PARAM_COMMA(in VertexFactoryInputParameters VertexInput)
	in VertexFactoryIntermediatesVS intermediates,
	in MaterialParametersVS materialParameters)
{
	FactoryInterpolantsParam interpolants;

	interpolants.worldNormal = intermediates.normal.xyz;
	interpolants.vertexColor = intermediates.vertexColor;
#if VERTEX_FACTORY_HAVE_TANGENT
	interpolants.tangent = intermediates.tangent;
#endif


#if MATERIAL_TEXCOORD_NUM
	UNROLL
	for( int i = 0; i < MATERIAL_TEXCOORD_NUM; ++i )
		interpolants.texCoords[i] = materialParameters.texCoords[i];
#endif

	return interpolants;
}

#endif //VERTEX_SHADER

#if PIXEL_SHADER

MaterialParametersPS VertexFactory_GetMaterialParameterPS(in FactoryInterpolantsParam factoryInterpolants, float4 svPosition)
{
	MaterialParametersPS parameters;

	float3x3  tangentToWorld;
	float normalYSign;
	float3 worldNormal = normalize(factoryInterpolants.worldNormal.xyz);

#if VERTEX_FACTORY_HAVE_TANGENT
	normalYSign = sign(factoryInterpolants.tangent.w);

	if( true )
	{
		float normalFactor = 1.0; // gl_FrontFacing ? 1.0 : -1.0;
		float3 tangentX = normalize(factoryInterpolants.tangent.xyz);
		tangentX = normalize(tangentX - dot(tangentX, worldNormal) * worldNormal );
		float3 tangentZ = normalFactor * worldNormal;
		float3 tangentY = normalYSign * cross(tangentZ, tangentX);
		tangentToWorld = float3x3(tangentX, tangentY, tangentZ);
#if COMPILER_HLSL
		tangentToWorld = transpose(tangentToWorld);
#endif
	}
#else
	{
		tangentToWorld = float3x3(1, 0, 0, 0, 1, 0, 0, 0, 1);
		normalYSign = 0;
	}
#endif

	parameters.vectexColor = factoryInterpolants.vertexColor;
	parameters.worldNormal = worldNormal;
	parameters.tangentToWorld = tangentToWorld;
#if MATERIAL_TEXCOORD_NUM
	for( int i = 0; i < MATERIAL_TEXCOORD_NUM; ++i )
		parameters.texCoords[i] = factoryInterpolants.texCoords[i];
#endif
	return parameters;
}

#endif //PIXEL_SHADER
