#ifndef SHADER_COMPILING
#define SHADER_COMPILING 0
#endif

#if (!SHADER_COMPILING) || COMPILER_GLSL

#define ATTRIBUTE0 0
#define ATTRIBUTE1 1
#define ATTRIBUTE2 2
#define ATTRIBUTE3 3
#define ATTRIBUTE4 4
#define ATTRIBUTE5 5
#define ATTRIBUTE6 6
#define ATTRIBUTE7 7
#define ATTRIBUTE8 8 
#define ATTRIBUTE9 9
#define ATTRIBUTE10 10
#define ATTRIBUTE11 11
#define ATTRIBUTE12 12
#define ATTRIBUTE13 13
#define ATTRIBUTE14 14
#define ATTRIBUTE15 15

#endif

#define ATTRIBUTE_POSITION  ATTRIBUTE0
#define ATTRIBUTE_NORMAL    ATTRIBUTE2
#define ATTRIBUTE_COLOR     ATTRIBUTE3
#define ATTRIBUTE_TANGENT   ATTRIBUTE15
#define ATTRIBUTE_TEXCOORD  ATTRIBUTE8
#define ATTRIBUTE_TEXCOORD1 ATTRIBUTE9
#define ATTRIBUTE_TEXCOORD2 ATTRIBUTE10
#define ATTRIBUTE_TEXCOORD3 ATTRIBUTE11
#define ATTRIBUTE_TEXCOORD4 ATTRIBUTE12
#define ATTRIBUTE_TEXCOORD5 ATTRIBUTE13
#define ATTRIBUTE_TEXCOORD6 ATTRIBUTE14
//#define ATTRIBUTE_TEXCOORD7 ATTRIBUTE15

#define PI 3.1415926535897932

#define VECTOR_FUNCTION_LIST( NAME )\
	NAME( float )\
	NAME( float2 )\
	NAME( float3 )\
	NAME( float4 )
#define DEFINE_FUNCTION_INNER( TYPE , NAME , CODE ) TYPE NAME( TYPE x ) CODE
#define DEFINE_VECTOR_FUNCTION( NAME , CODE )\
	DEFINE_FUNCTION_INNER( float2 , NAME , CODE )\
	DEFINE_FUNCTION_INNER( float3 , NAME , CODE )\
	DEFINE_FUNCTION_INNER( float4 , NAME , CODE )

#if !SHADER_COMPILING

#define cbuffer namespace
#define handle namespace

#define in
#define out
#define inout

template< class T , class VecType >
struct VecOpT
{

	VecType operator + (VecType);
	VecType operator - (VecType);
	VecType operator * (VecType);
	VecType operator / (VecType);
	VecType operator + (T);
	VecType operator * (T);
	VecType operator / (T);
	VecType operator - (T);

	VecType operator - (void);

	friend VecType operator * (T, VecType);
	T operator[](int);
};

template< class T >
struct TVec2 : VecOpT< T , TVec2<T> >
{
	T x, y;
	T r, g;
	T s, t;
	TVec2<T> xx, yy;
	TVec2<T> xy, st;

	TVec2();
	TVec2(T);
	TVec2(T, T);
};

template< class T >
struct TVec3 : TVec2<T>, VecOpT< T, TVec3<T> >
{
	TVec3<T> xxx, yyy, zzz, xyz;
	TVec2<T> xz, yz;
	T  z, b, p;

	TVec3();
	TVec3(T);
	TVec3(T, T, T);
	TVec3(TVec2, T);
	
	template< class Q >
	explicit operator TVec2<Q>();
};

template< class T >
struct TVec4 : TVec3<T> , VecOpT< T, TVec4<T> >
{
	TVec3<T> xyz, rgb, stp;
	T  w, a, q;

	TVec2<T> zw;
	TVec3<T> rga;

	TVec4();
	TVec4(T);
	TVec4(T, T, T, T);
	TVec4(TVec2, TVec2);
	TVec4(TVec3, T);

	template< class Q >
	explicit operator TVec3<Q>();
	template< class Q >
	explicit operator TVec2<Q>();
};

template< class T , 
	template< class > class TMat , 
	template< class > class TRow , 
	template< class > class TCol >
struct MatOpT
{
	typedef TMat<T> MatType;
	typedef TRow<T> RowType;
	typedef TCol<T> ColType;

	MatOpT(ColType, ColType, ColType);
	ColType operator[](int);
	MatType operator * (MatType);
	RowType operator * (ColType);
	friend MatType operator ( T , MatType );
};


template< class T >
struct TMat3x3 : MatOpT< T, TMat3x3 , TVec3 , TVec3 >
{
};
template< class T >
struct TMat4x3 : MatOpT< T, TMat4x3, TVec4, TVec3 >
{
};
template< class T >
struct TMat3x4 : MatOpT< T, TMat3x4, TVec3, TVec4 >
{
};
template< class T >
struct TMat4x4 : MatOpT< T, TMat4x4, TVec4, TVec4 >
{
	explicit operator TMat3x3<T>();
};

typedef TVec4<float> float4;
typedef TVec3<float> float3;
typedef TVec2<float> float2;
typedef TVec4<uint> uint4;
typedef TVec3<uint> uint3;
typedef TVec2<uint> uint2;
typedef TVec4<int> int4;
typedef TVec3<int> int3;
typedef TVec2<int> int2;
typedef TVec4<bool> bool4;
typedef TVec3<bool> bool3;
typedef TVec2<bool> bool2;

typedef TMat3x3< float > float3x3;
typedef TMat3x4< float > float3x4;
typedef TMat4x3< float > float4x3;
typedef TMat4x4< float > float4x4;


typedef float    half;
typedef TVec2<half>   half2;
typedef TVec3<half>   half3;
typedef TVec4<half>   half4;
typedef TMat3x3<half> half3x3;
typedef TMat3x4<half> half3x4;
typedef TMat4x3<half> half4x3;
typedef TMat4x4<half> half4x4;


template< class T >
TVec3<T> operator * (TMat3x3<T>, TVec3<T>);
template< class T >
TVec4<T> operator * (TMat4x4<T>, TVec3<T>);

#endif


#if COMPILER_GLSL
#include "GLSLDefine.sgc"
#elif COMPILER_HLSL
#include "HLSLDefine.sgc"
#endif

float Square(float x) { return x * x; }
DEFINE_VECTOR_FUNCTION(Square, { return x * x; })
float Pow3(float x) { return x * x * x; }
DEFINE_VECTOR_FUNCTION(Pow3, { return x * x * x; })

#define Pow4T( TYPE )\
	TYPE Pow4( TYPE x )\
	{\
		TYPE x2 = x*x;\
		return x2 * x2;\
	}
VECTOR_FUNCTION_LIST(Pow4T)
#undef Pow4T

#define Pow5T( TYPE )\
	TYPE Pow5( TYPE x )\
	{\
		TYPE x2 = x*x;\
		return x2 * x2 * x;\
	}
VECTOR_FUNCTION_LIST(Pow5T)
#undef Pow5T

#if SHADER_COMPILING


#else

template< class T >
T atan(T, T);
template< class T >
T max(T, T);
template< class T >
T min(T, T);

template< class T >
bool any(T);
template< class T >
bool all(T);

class SamplerState;
class Texture1D;
class Texture2D;
class Texture3D;

template< class T >
float    dot(T, T);
float3   cross(float3, float3);

template< class T >
float    length(T);

float4x4 mul(float4x4, float4x4);
float4   mul(float4, float4x4);
float3   mul(float3, float3x3);

template< class T >
T    saturate(T);
float3   reflect(float3, float3);

template< class T >
TVec2<T> normalize(TVec2<T>);
template< class T >
TVec3<T> normalize(TVec3<T>);
template< class T >
TVec4<T> normalize(TVec4<T>);

template< class T >
T   lerp(T, T, float);
float4x4 transpose(float4x4);
float4x4 inverse(float4x4);

template< class T >
class Buffer
{
};

#endif // SHADER_COMPILING